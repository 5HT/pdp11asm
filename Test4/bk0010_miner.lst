0004 0000                      		CONVERT1251TOKOI8R
0005 0000                      		DECIMALNUMBERS
0006 0000                      		ORG 01000
0010 0200                      		EntryPoint:
0011 0200 012706 040000        		    MOV #16384, SP
0012 0204 012707 004424        		    MOV #main, PC
0016 0208                      		SHLW:
0017 0208 042701 177760        		    BIC #0FFF0h, R1
0018 020C 001403               		    BEQ SHLW1
0019 020E 000241               		    CLC
0020 0210                      		SHLW2:
0021 0210 006100               		    ROL R0
0022 0212 077102               		    SOB R1, SHLW2
0023 0214                      		SHLW1:
0024 0214 000207               		    RTS PC
0028 0216                      		SHRW:
0029 0216 042701 177760        		    BIC #0FFF0h, R1
0030 021A 001403               		    BEQ SHRW1
0031 021C 000241               		    CLC
0032 021E                      		SHRW2:
0033 021E 006000               		    ROR R0
0034 0220 077102               		    SOB R1, SHRW2
0035 0222                      		SHRW1:
0036 0222 000207               		    RTS PC
0040 0224                      		__SWITCH:
0041 0224 012601               		    MOV (SP)+, R1
0042 0226                      		__SWITCH0:
0043 0226 012105               		    MOV (R1)+, R5
0044 0228 001403               		    BEQ __SWITCH1
0045 022A 020021               		    CMP R0, (R1)+
0046 022C 001374               		    BNE __SWITCH0
0047 022E 010507               		    MOV R5, PC
0048 0230                      		__SWITCH1:
0049 0230 012107               		    MOV (R1)+, PC
0053 0232                      		SGNB0:
0054 0232 042700 177400        		    BIC #0xFF00, R0
0055 0236 105700               		    TSTB R0
0056 0238 100002               		    BPL SGNB0R
0057 023A 052700 177400        		    BIS #0xFF00, R0
0058 023E                      		SGNB0R:
0059 023E 000207               		    RTS PC
0063 0240                      		DIVWI:
0064 0240                      		MODWI:
0065 0240                      		MULWI:
0066 0240                      		GOTOXY:
0067 0240                      		PUTTEXT:
0068 0240                      		PUTC:
0069 0240 000207               		    RET
0074 0242                      		draw:
0075 0242 010104               		    MOV R1, R4
0076 0244 010205               		    MOV R2, R5
0077 0246                      		draw1:
0078 0246 112024               		    MOVB (R0)+,(R4)+
0079 0248 077502               		    SOB R5, draw1
0080 024A 062701 000100        		    ADD #64., R1
0081 024E 077307               		    SOB R3, draw
0082 0250 000207               		    RTS PC
0087 0252                      		drawa:
0088 0252 010104               		    MOV R1, R4
0089 0254 010205               		    MOV R2, R5
0090 0256                      		drawa1:
0091 0256 042014               		    BIC (R0)+,(R4)
0092 0258 052024               		    BIS (R0)+,(R4)+
0093 025A 077503               		    SOB R5, drawa1
0094 025C 062701 000100        		    ADD #64., R1
0095 0260 077310               		    SOB R3, drawa
0096 0262 000207               		    RTS PC
0100 0264                      		CLEARSCREEN:
0101 0264 012700 040000        		    MOV #4000h, R0
0102 0268 012701 004000        		    MOV #800h, R1
0103 026C                      		CLEARSCREEN1:
0104 026C 005020               		    CLR (R0)+
0105 026E 005020               		    CLR (R0)+
0106 0270 005020               		    CLR (R0)+
0107 0272 005020               		    CLR (R0)+
0108 0274 077105               		    SOB R1, CLEARSCREEN1
0109 0276 000207               		    RTS PC
0522 0278                      		rand:
0522 0278                      		//457     rand_state = (uint8_t)(rand_state << (uint8_t)2) + rand_state + (uint8_t)1;
0522 0278 113700 007171        		    movb @#3705, R0
0522 027C 106100               		    rolb R0
0522 027E 106100               		    rolb R0
0522 0280 142700 176003        		    bicb #64515, R0
0522 0284 042700 177400        		    bic #65280, R0
0522 0288 113701 007171        		    movb @#3705, R1
0522 028C 042701 177400        		    bic #65280, R1
0522 0290 060100               		    add R1, R0
0522 0292 062700 000001        		    add #1, R0
0522 0296 110037 007171        		    movb R0, @#3705
0522 029A                      		//458     return rand_state;
0522 029A 113700 007171        		    movb @#3705, R0
0522 029E 000207               		    ret
0522 02A0                      		startGame:
0522 02A0 162706 000006        		    sub #6, SP
0522 02A4                      		//244     gameWidth1 = gameWidth-1;
0522 02A4 013700 005752        		    mov @#3050, R0
0522 02A8 162700 000001        		    sub #1, R0
0522 02AC 010037 005756        		    mov R0, @#3054
0522 02B0                      		//245     gameHeight1 = gameHeight-1;
0522 02B0 013700 005754        		    mov @#3052, R0
0522 02B4 162700 000001        		    sub #1, R0
0522 02B8 010037 005760        		    mov R0, @#3056
0522 02BC                      		//248     {   clearScreen();
0522 02BC 004737 001144        		    jsr PC, @#612
0522 02C0                      		//250         uint8_t* a = (uint8_t*)(040000 + 64*16*2);
0522 02C0 012766 044000 000004 		    mov #18432, 4(SP)
0522 02C6                      		//251         for(y=0; y<14; y++, a+=64*15)
0522 02C6 005066 000002        		    clr 2(SP)
0522 02CA 022766 000016 000002 		    cmp #14, 2(SP)
0522 02D0 101437               		    blos 0310h
0522 02D2                      		//252             for(x=0; x<16; x++, a+=4)
0522 02D2 005066 000000        		    clr 0(SP)
0522 02D6 022766 000020 000000 		    cmp #16, 0(SP)
0522 02DC 101423               		    blos 0304h
0522 02DE                      		//253                 draw(a, bmpBlock, 4, 16);
0522 02DE 012746 000020        		    mov #16, -(SP)
0522 02E2 012746 000004        		    mov #4, -(SP)
0522 02E6 012746 015456        		    mov #6958, -(SP)
0522 02EA 016601 000012        		    mov 10(SP), R1
0522 02EE 012600               		    mov (SP)+, R0
0522 02F0 012602               		    mov (SP)+, R2
0522 02F2 012603               		    mov (SP)+, R3
0522 02F4 004737 001102        		    jsr PC, @#578
0522 02F8 005266 000000        		    inc 0(SP)
0522 02FC 062766 000004 000004 		    add #4, 4(SP)
0522 0302 000751               		    br 02D6h
0522 0304 005266 000002        		    inc 2(SP)
0522 0308 062766 001700 000004 		    add #960, 4(SP)
0522 030E 000735               		    br 02CAh
0522 0310                      		//257     cursorX = gameWidth >> 1;
0522 0310 013700 005752        		    mov @#3050, R0
0522 0314 000241               		    clc
0522 0316 006000               		    ror R0
0522 0318 010037 005764        		    mov R0, @#3060
0522 031C                      		//258     cursorY = gameHeight >> 1;
0522 031C 013700 005754        		    mov @#3052, R0
0522 0320 000241               		    clc
0522 0322 006000               		    ror R0
0522 0324 010037 005766        		    mov R0, @#3062
0522 0328                      		//259     bombsPutted = 0;
0522 0328 005037 005774        		    clr @#3068
0522 032C                      		//260     gameOverFlag = 0;
0522 032C 005037 005762        		    clr @#3058
0522 0330                      		//261     time = 0;
0522 0330 005037 005776        		    clr @#3070
0522 0334                      		//264     {   unsigned i = 0;
0522 0334 005066 000000        		    clr 0(SP)
0522 0338                      		//265         do
0522 0338                      		//266         {
0522 0338 016600 000000        		    mov 0(SP), R0
0522 033C 062700 006002        		    add #3074, R0
0522 0340 105010               		    clrb (R0)
0522 0342                      		//268             userMarks[i] = 0;
0522 0342 016600 000000        		    mov 0(SP), R0
0522 0346 062700 006402        		    add #3330, R0
0522 034A 105010               		    clrb (R0)
0522 034C                      		//269             i++;
0522 034C 005266 000000        		    inc 0(SP)
0522 0350                      		//270         } while(i != 256);
0522 0350 022766 000400 000000 		    cmp #256, 0(SP)
0522 0356 001360               		    bne 0338h
0522 0358                      		//274     drawSmile(bmpGood);
0522 0358 012746 013376        		    mov #5886, -(SP)
0522 035C 004737 002254        		    jsr PC, @#1196
0522 0360 062706 000002        		    add #2, SP
0522 0364                      		//277     drawPlayField();
0522 0364 004737 002310        		    jsr PC, @#1224
0522 0368                      		//280     leftNumber();
0522 0368 004737 002412        		    jsr PC, @#1290
0522 036C                      		//281     rightNumber();
0522 036C 004737 002530        		    jsr PC, @#1368
0522 0370                      		//283     for(;;)
0522 0370                      		//284     {
0522 0370 004737 001170        		    jsr PC, @#632
0522 0374                      		//287         if(!gameOverFlag && time!=999)
0522 0374 013700 005762        		    mov @#3058, R0
0522 0378 005700               		    tst R0
0522 037A 001010               		    bne 038Ch
0522 037C 022737 001747 005776 		    cmp #999, @#3070
0522 0382 001404               		    beq 038Ch
0522 0384                      		//288         {
0522 0384 005237 005776        		    inc @#3070
0522 0388                      		//297             rightNumber();
0522 0388 004737 002530        		    jsr PC, @#1368
0522 038C                      		//301         if((*(uint8_t*)0177660 & 128) == 0) continue;
0522 038C 113700 177660        		    movb @#65456, R0
0522 0390 142700 177577        		    bicb #65407, R0
0522 0394 122700 000000        		    cmpb #0, R0
0522 0398 001001               		    bne 039Ch
0522 039A                      		//301         if((*(uint8_t*)0177660 & 128) == 0) continue;
0522 039A 000752               		    br 0370h
0522 039C                      		//304         switch(*(uint8_t*)0177662)
0522 039C 113700 177662        		    movb @#65458, R0
0522 03A0 004737 001044        		    jsr PC, @#548
0522 03A4 001674               		    beq 031Eh
0522 03A6 000010               		    
0522 03A8 001726               		    beq 0356h
0522 03AA 000031               		    
0522 03AC 001764               		    beq 0396h
0522 03AE 000032               		    
0522 03B0 002014               		    bge 03CAh
0522 03B2 000033               		    
0522 03B4 002052               		    bge 040Ah
0522 03B6 000040               		    
0522 03B8 000000               		    halt
0522 03BA 002112               		    bge 0450h
0522 03BC                      		//306             case 8:
0522 03BC                      		//307                 if(cursorX==0) continue;
0522 03BC 022737 000000 005764 		    cmp #0, @#3060
0522 03C2 001001               		    bne 03C6h
0522 03C4                      		//307                 if(cursorX==0) continue;
0522 03C4 000725               		    br 0370h
0522 03C6                      		//308                 hideCursor();
0522 03C6 004737 002552        		    jsr PC, @#1386
0522 03CA                      		//309                 cursorX--;
0522 03CA 005337 005764        		    dec @#3060
0522 03CE                      		//310                 drawCursor();
0522 03CE 004737 002574        		    jsr PC, @#1404
0522 03D2                      		//311                 continue;
0522 03D2 000716               		    br 0370h
0522 03D4                      		//312                 break;
0522 03D4 000546               		    br 04A2h
0522 03D6                      		//313             case 0x19:
0522 03D6                      		//314                 if(cursorX+1 == gameWidth) continue;
0522 03D6 013700 005764        		    mov @#3060, R0
0522 03DA 062700 000001        		    add #1, R0
0522 03DE 023700 005752        		    cmp @#3050, R0
0522 03E2 001001               		    bne 03E6h
0522 03E4                      		//314                 if(cursorX+1 == gameWidth) continue;
0522 03E4 000705               		    br 0370h
0522 03E6                      		//315                 hideCursor();
0522 03E6 004737 002552        		    jsr PC, @#1386
0522 03EA                      		//316                 cursorX++;
0522 03EA 005237 005764        		    inc @#3060
0522 03EE                      		//317                 drawCursor();
0522 03EE 004737 002574        		    jsr PC, @#1404
0522 03F2                      		//318                 break;
0522 03F2 000527               		    br 04A2h
0522 03F4                      		//319             case 0x1A:
0522 03F4                      		//320                 if(cursorY == 0) continue;
0522 03F4 022737 000000 005766 		    cmp #0, @#3062
0522 03FA 001001               		    bne 03FEh
0522 03FC                      		//320                 if(cursorY == 0) continue;
0522 03FC 000671               		    br 0370h
0522 03FE                      		//321                 hideCursor();
0522 03FE 004737 002552        		    jsr PC, @#1386
0522 0402                      		//322                 cursorY--;
0522 0402 005337 005766        		    dec @#3062
0522 0406                      		//323                 drawCursor();
0522 0406 004737 002574        		    jsr PC, @#1404
0522 040A                      		//324                 break;
0522 040A 000513               		    br 04A2h
0522 040C                      		//325             case 0x1B:
0522 040C                      		//326                 if(cursorY+1 == gameHeight) continue;
0522 040C 013700 005766        		    mov @#3062, R0
0522 0410 062700 000001        		    add #1, R0
0522 0414 023700 005754        		    cmp @#3052, R0
0522 0418 001001               		    bne 041Ch
0522 041A                      		//326                 if(cursorY+1 == gameHeight) continue;
0522 041A 000652               		    br 0370h
0522 041C                      		//327                 hideCursor();
0522 041C 004737 002552        		    jsr PC, @#1386
0522 0420                      		//328                 cursorY++;
0522 0420 005237 005766        		    inc @#3062
0522 0424                      		//329                 drawCursor();
0522 0424 004737 002574        		    jsr PC, @#1404
0522 0428                      		//330                 break;
0522 0428 000474               		    br 04A2h
0522 042A                      		//331             case ' ':
0522 042A                      		//332                 if(!bombsPutted) putBombs();
0522 042A 013700 005774        		    mov @#3068, R0
0522 042E 005700               		    tst R0
0522 0430 001002               		    bne 0436h
0522 0432                      		//332                 if(!bombsPutted) putBombs();
0522 0432 004737 002646        		    jsr PC, @#1446
0522 0436                      		//333             	open(cursorX, cursorY);
0522 0436 013746 005766        		    mov @#3062, -(SP)
0522 043A 013746 005764        		    mov @#3060, -(SP)
0522 043E 004737 003174        		    jsr PC, @#1660
0522 0442 062706 000004        		    add #4, SP
0522 0446                      		//334                 continue;
0522 0446 012707 001560        		    mov #880, PC
0522 044A                      		//335             default:
0522 044A                      		//336                 if(gameOverFlag) continue;
0522 044A 013700 005762        		    mov @#3058, R0
0522 044E 005700               		    tst R0
0522 0450 001402               		    beq 0456h
0522 0452                      		//336                 if(gameOverFlag) continue;
0522 0452 012707 001560        		    mov #880, PC
0522 0456                      		//337                 uint8_t* a = &userMarks[(cursorY << 4) + cursorX];
0522 0456 013700 005766        		    mov @#3062, R0
0522 045A 006100               		    rol R0
0522 045C 006100               		    rol R0
0522 045E 006100               		    rol R0
0522 0460 006100               		    rol R0
0522 0462 042700 000017        		    bic #15, R0
0522 0466 063700 005764        		    add @#3060, R0
0522 046A 062700 006402        		    add #3330, R0
0522 046E 010066 000000        		    mov R0, 0(SP)
0522 0472                      		//338                 *a = *a==2 ? 0 : *a+1;
0522 0472 117600 000000        		    movb @0(SP), R0
0522 0476 122700 000002        		    cmpb #2, R0
0522 047A 001003               		    bne 0482h
0522 047C 012700 000000        		    mov #0, R0
0522 0480 000406               		    br 048Eh
0522 0482 117600 000000        		    movb @0(SP), R0
0522 0486 042700 177400        		    bic #65280, R0
0522 048A 062700 000001        		    add #1, R0
0522 048E 110076 000000        		    movb R0, @0(SP)
0522 0492                      		//339                 hideCursor();
0522 0492 004737 002552        		    jsr PC, @#1386
0522 0496                      		//340             	drawCursor();
0522 0496 004737 002574        		    jsr PC, @#1404
0522 049A                      		//341                 leftNumber();
0522 049A 004737 002412        		    jsr PC, @#1290
0522 049E                      		//342                 continue;
0522 049E 012707 001560        		    mov #880, PC
0522 04A2 012707 001560        		    mov #880, PC
0522 04A6 062706 000006        		    add #6, SP
0522 04AA 000207               		    ret
0522 04AC                      		drawSmile:
0522 04AC                      		//505     draw((void*)040435, img, 6, 24);
0522 04AC 012746 000030        		    mov #24, -(SP)
0522 04B0 012746 000006        		    mov #6, -(SP)
0522 04B4 016646 000006        		    mov 6(SP), -(SP)
0522 04B8 012701 040435        		    mov #16669, R1
0522 04BC 012600               		    mov (SP)+, R0
0522 04BE 012602               		    mov (SP)+, R2
0522 04C0 012603               		    mov (SP)+, R3
0522 04C2 004737 001102        		    jsr PC, @#578
0522 04C6 000207               		    ret
0522 04C8                      		drawPlayField:
0522 04C8 162706 000004        		    sub #4, SP
0522 04CC                      		//515     for(y=0; y<gameHeight; y++)
0522 04CC 005066 000002        		    clr 2(SP)
0522 04D0 023766 005754 000002 		    cmp @#3052, 2(SP)
0522 04D6 101424               		    blos 0500h
0522 04D8                      		//516         for(x=0; x<gameWidth; x++)
0522 04D8 005066 000000        		    clr 0(SP)
0522 04DC 023766 005752 000000 		    cmp @#3050, 0(SP)
0522 04E2 101413               		    blos 04FAh
0522 04E4                      		//517            redrawCell012(x,y);
0522 04E4 016646 000002        		    mov 2(SP), -(SP)
0522 04E8 016646 000002        		    mov 2(SP), -(SP)
0522 04EC 004737 004142        		    jsr PC, @#2146
0522 04F0 062706 000004        		    add #4, SP
0522 04F4 005266 000000        		    inc 0(SP)
0522 04F8 000761               		    br 04DCh
0522 04FA 005266 000002        		    inc 2(SP)
0522 04FE 000750               		    br 04D0h
0522 0500                      		//518     drawCursor();
0522 0500 004737 002574        		    jsr PC, @#1404
0522 0504 062706 000004        		    add #4, SP
0522 0508 000207               		    ret
0522 050A                      		leftNumber:
0522 050A 162706 000004        		    sub #4, SP
0522 050E                      		//487     unsigned c=0, b=bombsCnt;
0522 050E 005066 000000        		    clr 0(SP)
0522 0512 013766 005772 000002 		    mov @#3066, 2(SP)
0522 0518                      		//488     do
0522 0518                      		//489     {
0522 0518 016600 000000        		    mov 0(SP), R0
0522 051C 062700 006402        		    add #3330, R0
0522 0520 111000               		    movb (R0), R0
0522 0522 122700 000001        		    cmpb #1, R0
0522 0526 001002               		    bne 052Ch
0522 0528                      		//490         if(userMarks[c] == 1) b--;
0522 0528 005366 000002        		    dec 2(SP)
0522 052C                      		//491     } while(b!=0 && ++c);
0522 052C 022766 000000 000002 		    cmp #0, 2(SP)
0522 0532 001407               		    beq 0542h
0522 0534 012700 000000        		    mov #0, R0
0522 0538 060600               		    add SP, R0
0522 053A 005210               		    inc (R0)
0522 053C 011000               		    mov (R0), R0
0522 053E 005700               		    tst R0
0522 0540 001353               		    bne 0518h
0522 0542                      		//492     drawNumber((void*)040510, b);
0522 0542 016646 000002        		    mov 2(SP), -(SP)
0522 0546 012746 040510        		    mov #16712, -(SP)
0522 054A 004737 005654        		    jsr PC, @#2988
0522 054E 062706 000004        		    add #4, SP
0522 0552 062706 000004        		    add #4, SP
0522 0556 000207               		    ret
0522 0558                      		rightNumber:
0522 0558                      		//497     drawNumber((void*)040573, time);
0522 0558 013746 005776        		    mov @#3070, -(SP)
0522 055C 012746 040573        		    mov #16763, -(SP)
0522 0560 004737 005654        		    jsr PC, @#2988
0522 0564 062706 000004        		    add #4, SP
0522 0568 000207               		    ret
0522 056A                      		hideCursor:
0522 056A                      		//376     redrawCell012(cursorX, cursorY);
0522 056A 013746 005766        		    mov @#3062, -(SP)
0522 056E 013746 005764        		    mov @#3060, -(SP)
0522 0572 004737 004142        		    jsr PC, @#2146
0522 0576 062706 000004        		    add #4, SP
0522 057A 000207               		    ret
0522 057C                      		drawCursor:
0522 057C                      		//381     drawa(calcCell2(cursorX, cursorY), bmpCursor, 2, 16);
0522 057C 012746 000020        		    mov #16, -(SP)
0522 0580 012746 000002        		    mov #2, -(SP)
0522 0584 012746 011476        		    mov #4926, -(SP)
0522 0588 013746 005766        		    mov @#3062, -(SP)
0522 058C 013746 005764        		    mov @#3060, -(SP)
0522 0590 004737 005032        		    jsr PC, @#2586
0522 0594 062706 000004        		    add #4, SP
0522 0598 010001               		    mov R0, R1
0522 059A 012600               		    mov (SP)+, R0
0522 059C 012602               		    mov (SP)+, R2
0522 059E 012603               		    mov (SP)+, R3
0522 05A0 004737 001122        		    jsr PC, @#594
0522 05A4 000207               		    ret
0522 05A6                      		putBombs:
0522 05A6 162706 000010        		    sub #8, SP
0522 05AA                      		//353     bombsPutted = 1;
0522 05AA 012737 000001 005774 		    mov #1, @#3068
0522 05B0                      		//354     bc = bombsCnt;
0522 05B0 013766 005772 000004 		    mov @#3066, 4(SP)
0522 05B6                      		//355     while(bc)
0522 05B6 016600 000004        		    mov 4(SP), R0
0522 05BA 005700               		    tst R0
0522 05BC 001534               		    beq 0676h
0522 05BE                      		//356     {
0522 05BE 004737 001170        		    jsr PC, @#632
0522 05C2 042700 177400        		    bic #65280, R0
0522 05C6 010066 000000        		    mov R0, 0(SP)
0522 05CA                      		//357 	x = rand(); x = (x>>4) ^ (x&0xF);
0522 05CA 016600 000000        		    mov 0(SP), R0
0522 05CE 006000               		    ror R0
0522 05D0 006000               		    ror R0
0522 05D2 006000               		    ror R0
0522 05D4 006000               		    ror R0
0522 05D6 042700 170000        		    bic #61440, R0
0522 05DA 010046               		    mov R0, -(SP)
0522 05DC 016600 000002        		    mov 2(SP), R0
0522 05E0 042700 177760        		    bic #65520, R0
0522 05E4 010001               		    mov R0, R1
0522 05E6 012600               		    mov (SP)+, R0
0522 05E8 074100               		    xor R1, R0
0522 05EA 010066 000000        		    mov R0, 0(SP)
0522 05EE                      		//358 	y = rand(); y = (y>>4) ^ (y&0xF);
0522 05EE 004737 001170        		    jsr PC, @#632
0522 05F2 042700 177400        		    bic #65280, R0
0522 05F6 010066 000002        		    mov R0, 2(SP)
0522 05FA                      		//358 	y = rand(); y = (y>>4) ^ (y&0xF);
0522 05FA 016600 000002        		    mov 2(SP), R0
0522 05FE 006000               		    ror R0
0522 0600 006000               		    ror R0
0522 0602 006000               		    ror R0
0522 0604 006000               		    ror R0
0522 0606 042700 170000        		    bic #61440, R0
0522 060A 010046               		    mov R0, -(SP)
0522 060C 016600 000004        		    mov 4(SP), R0
0522 0610 042700 177760        		    bic #65520, R0
0522 0614 010001               		    mov R0, R1
0522 0616 012600               		    mov (SP)+, R0
0522 0618 074100               		    xor R1, R0
0522 061A 010066 000002        		    mov R0, 2(SP)
0522 061E                      		//359         if(x >= gameWidth || y >= gameHeight) continue;
0522 061E 023766 005752 000000 		    cmp @#3050, 0(SP)
0522 0624 101404               		    blos 062Eh
0522 0626 023766 005754 000002 		    cmp @#3052, 2(SP)
0522 062C 101001               		    bhi 0630h
0522 062E                      		//359         if(x >= gameWidth || y >= gameHeight) continue;
0522 062E 000703               		    br 05B6h
0522 0630                      		//360         if(cursorX==x && cursorY==y) continue; // Бомба не должна быть под крсором
0522 0630 026637 000000 005764 		    cmp 0(SP), @#3060
0522 0636 001005               		    bne 0642h
0522 0638 026637 000002 005766 		    cmp 2(SP), @#3062
0522 063E 001001               		    bne 0642h
0522 0640                      		//360         if(cursorX==x && cursorY==y) continue; // Бомба не должна быть под крсором
0522 0640 000672               		    br 05B6h
0522 0642                      		//361         uint8_t* a = &playfield[(y<<4) + x];
0522 0642 016600 000002        		    mov 2(SP), R0
0522 0646 006100               		    rol R0
0522 0648 006100               		    rol R0
0522 064A 006100               		    rol R0
0522 064C 006100               		    rol R0
0522 064E 042700 000017        		    bic #15, R0
0522 0652 066600 000000        		    add 0(SP), R0
0522 0656 062700 006002        		    add #3074, R0
0522 065A 010066 000006        		    mov R0, 6(SP)
0522 065E                      		//362         if(*a == 0x80) continue; // Бомба в этой клетке уже есть
0522 065E 117600 000006        		    movb @6(SP), R0
0522 0662 122700 000200        		    cmpb #128, R0
0522 0666 001001               		    bne 066Ah
0522 0668                      		//362         if(*a == 0x80) continue; // Бомба в этой клетке уже есть
0522 0668 000646               		    br 05B6h
0522 066A                      		//363         *a = 0x80;
0522 066A 112776 000200 000006 		    movb #128, @6(SP)
0522 0670                      		//364         bc--;
0522 0670 005366 000004        		    dec 4(SP)
0522 0674 000640               		    br 05B6h
0522 0676 062706 000010        		    add #8, SP
0522 067A 000207               		    ret
0522 067C                      		open:
0522 067C 162706 000002        		    sub #2, SP
0522 0680                      		//409     if(x >= gameWidth || y >= gameHeight) return;
0522 0680 023766 005752 000004 		    cmp @#3050, 4(SP)
0522 0686 101404               		    blos 0690h
0522 0688 023766 005754 000006 		    cmp @#3052, 6(SP)
0522 068E 101003               		    bhi 0696h
0522 0690                      		//409     if(x >= gameWidth || y >= gameHeight) return;
0522 0690 062706 000002        		    add #2, SP
0522 0694 000207               		    ret
0522 0696                      		//410     uint8_t a = playfield[(y << 4) + x];
0522 0696 016600 000006        		    mov 6(SP), R0
0522 069A 006100               		    rol R0
0522 069C 006100               		    rol R0
0522 069E 006100               		    rol R0
0522 06A0 006100               		    rol R0
0522 06A2 042700 000017        		    bic #15, R0
0522 06A6 066600 000004        		    add 4(SP), R0
0522 06AA 062700 006002        		    add #3074, R0
0522 06AE 111066 000000        		    movb (R0), 0(SP)
0522 06B2                      		//411     if(a == 0x80)
0522 06B2 116600 000000        		    movb 0(SP), R0
0522 06B6 122700 000200        		    cmpb #128, R0
0522 06BA 001015               		    bne 06D6h
0522 06BC                      		//412     {
0522 06BC 012746 013616        		    mov #6030, -(SP)
0522 06C0 004737 002254        		    jsr PC, @#1196
0522 06C4 062706 000002        		    add #2, SP
0522 06C8                      		//414         gameOverFlag = 1;
0522 06C8 012737 000001 005762 		    mov #1, @#3058
0522 06CE                      		//415 	drawPlayField();
0522 06CE 004737 002310        		    jsr PC, @#1224
0522 06D2 012707 003716        		    mov #1998, PC
0522 06D6                      		//418     if(a == 0)
0522 06D6 116600 000000        		    movb 0(SP), R0
0522 06DA 122700 000000        		    cmpb #0, R0
0522 06DE 001167               		    bne 07CEh
0522 06E0                      		//419     {   
0522 06E0 016646 000006        		    mov 6(SP), -(SP)
0522 06E4 016646 000006        		    mov 6(SP), -(SP)
0522 06E8 004737 005222        		    jsr PC, @#2706
0522 06EC 062706 000004        		    add #4, SP
0522 06F0 022700 000001        		    cmp #1, R0
0522 06F4 001144               		    bne 07BEh
0522 06F6                      		//421 	{
0522 06F6 016600 000006        		    mov 6(SP), R0
0522 06FA 162700 000001        		    sub #1, R0
0522 06FE 010046               		    mov R0, -(SP)
0522 0700 016600 000006        		    mov 6(SP), R0
0522 0704 162700 000001        		    sub #1, R0
0522 0708 010046               		    mov R0, -(SP)
0522 070A 004737 003174        		    jsr PC, @#1660
0522 070E 062706 000004        		    add #4, SP
0522 0712                      		//423 	    open(x,y-1);
0522 0712 016600 000006        		    mov 6(SP), R0
0522 0716 162700 000001        		    sub #1, R0
0522 071A 010046               		    mov R0, -(SP)
0522 071C 016646 000006        		    mov 6(SP), -(SP)
0522 0720 004737 003174        		    jsr PC, @#1660
0522 0724 062706 000004        		    add #4, SP
0522 0728                      		//424 	    open(x+1,y-1);
0522 0728 016600 000006        		    mov 6(SP), R0
0522 072C 162700 000001        		    sub #1, R0
0522 0730 010046               		    mov R0, -(SP)
0522 0732 016600 000006        		    mov 6(SP), R0
0522 0736 062700 000001        		    add #1, R0
0522 073A 010046               		    mov R0, -(SP)
0522 073C 004737 003174        		    jsr PC, @#1660
0522 0740 062706 000004        		    add #4, SP
0522 0744                      		//425 	    open(x-1,y);
0522 0744 016646 000006        		    mov 6(SP), -(SP)
0522 0748 016600 000006        		    mov 6(SP), R0
0522 074C 162700 000001        		    sub #1, R0
0522 0750 010046               		    mov R0, -(SP)
0522 0752 004737 003174        		    jsr PC, @#1660
0522 0756 062706 000004        		    add #4, SP
0522 075A                      		//426 	    open(x+1,y);
0522 075A 016646 000006        		    mov 6(SP), -(SP)
0522 075E 016600 000006        		    mov 6(SP), R0
0522 0762 062700 000001        		    add #1, R0
0522 0766 010046               		    mov R0, -(SP)
0522 0768 004737 003174        		    jsr PC, @#1660
0522 076C 062706 000004        		    add #4, SP
0522 0770                      		//427 	    open(x-1,y+1);
0522 0770 016600 000006        		    mov 6(SP), R0
0522 0774 062700 000001        		    add #1, R0
0522 0778 010046               		    mov R0, -(SP)
0522 077A 016600 000006        		    mov 6(SP), R0
0522 077E 162700 000001        		    sub #1, R0
0522 0782 010046               		    mov R0, -(SP)
0522 0784 004737 003174        		    jsr PC, @#1660
0522 0788 062706 000004        		    add #4, SP
0522 078C                      		//428 	    open(x,y+1);
0522 078C 016600 000006        		    mov 6(SP), R0
0522 0790 062700 000001        		    add #1, R0
0522 0794 010046               		    mov R0, -(SP)
0522 0796 016646 000006        		    mov 6(SP), -(SP)
0522 079A 004737 003174        		    jsr PC, @#1660
0522 079E 062706 000004        		    add #4, SP
0522 07A2                      		//429 	    open(x+1,y+1);
0522 07A2 016600 000006        		    mov 6(SP), R0
0522 07A6 062700 000001        		    add #1, R0
0522 07AA 010046               		    mov R0, -(SP)
0522 07AC 016600 000006        		    mov 6(SP), R0
0522 07B0 062700 000001        		    add #1, R0
0522 07B4 010046               		    mov R0, -(SP)
0522 07B6 004737 003174        		    jsr PC, @#1660
0522 07BA 062706 000004        		    add #4, SP
0522 07BE                      		//431         redrawCell012(x, y);
0522 07BE 016646 000006        		    mov 6(SP), -(SP)
0522 07C2 016646 000006        		    mov 6(SP), -(SP)
0522 07C6 004737 004142        		    jsr PC, @#2146
0522 07CA 062706 000004        		    add #4, SP
0522 07CE                      		//433     drawCursor();
0522 07CE 004737 002574        		    jsr PC, @#1404
0522 07D2 062706 000002        		    add #2, SP
0522 07D6 000207               		    ret
0522 07D8                      		checkWin:
0522 07D8 162706 000002        		    sub #2, SP
0522 07DC                      		//463     unsigned a = 0;
0522 07DC 005066 000000        		    clr 0(SP)
0522 07E0                      		//464     for(a=0; a<256; a++)
0522 07E0 005066 000000        		    clr 0(SP)
0522 07E4 022766 000400 000000 		    cmp #256, 0(SP)
0522 07EA 101416               		    blos 0808h
0522 07EC                      		//465         if(playfield[a] == 254)
0522 07EC 016600 000000        		    mov 0(SP), R0
0522 07F0 062700 006002        		    add #3074, R0
0522 07F4 111000               		    movb (R0), R0
0522 07F6 122700 000376        		    cmpb #254, R0
0522 07FA 001003               		    bne 0802h
0522 07FC                      		//466             return;
0522 07FC 062706 000002        		    add #2, SP
0522 0800 000207               		    ret
0522 0802 005266 000000        		    inc 0(SP)
0522 0806 000756               		    br 07E4h
0522 0808                      		//468     drawSmile(bmpWin);
0522 0808 012746 014036        		    mov #6174, -(SP)
0522 080C 004737 002254        		    jsr PC, @#1196
0522 0810 062706 000002        		    add #2, SP
0522 0814                      		//469     gameOverFlag = 1;
0522 0814 012737 000001 005762 		    mov #1, @#3058
0522 081A                      		//470     drawPlayField();
0522 081A 004737 002310        		    jsr PC, @#1224
0522 081E 062706 000002        		    add #2, SP
0522 0822 000207               		    ret
0522 0824                      		getBitmap:
0522 0824                      		//444     if(n & 0x80) return gameOverFlag ? bmpB : bmpUn;
0522 0824 116600 000002        		    movb 2(SP), R0
0522 0828 142700 177577        		    bicb #65407, R0
0522 082C 005700               		    tst R0
0522 082E 001412               		    beq 0844h
0522 0830                      		//444     if(n & 0x80) return gameOverFlag ? bmpB : bmpUn;
0522 0830 013700 005762        		    mov @#3058, R0
0522 0834 005700               		    tst R0
0522 0836 001403               		    beq 083Eh
0522 0838 012700 012076        		    mov #5182, R0
0522 083C 000402               		    br 0842h
0522 083E 012700 012176        		    mov #5246, R0
0522 0842 000207               		    ret
0522 0844                      		//445     return (((uint16_t)n)<<6) + bmpUn;
0522 0844 116600 000002        		    movb 2(SP), R0
0522 0848 042700 177400        		    bic #65280, R0
0522 084C 006100               		    rol R0
0522 084E 006100               		    rol R0
0522 0850 006100               		    rol R0
0522 0852 006100               		    rol R0
0522 0854 006100               		    rol R0
0522 0856 006100               		    rol R0
0522 0858 042700 000077        		    bic #63, R0
0522 085C 062700 012176        		    add #5246, R0
0522 0860 000207               		    ret
0522 0862                      		redrawCell012:
0522 0862                      		//450     draw(calcCell2(x,y), getBitmap(playfield[(y<<4)+x]), 4, 16);
0522 0862 012746 000020        		    mov #16, -(SP)
0522 0866 012746 000004        		    mov #4, -(SP)
0522 086A 016600 000010        		    mov 8(SP), R0
0522 086E 006100               		    rol R0
0522 0870 006100               		    rol R0
0522 0872 006100               		    rol R0
0522 0874 006100               		    rol R0
0522 0876 042700 000017        		    bic #15, R0
0522 087A 066600 000006        		    add 6(SP), R0
0522 087E 062700 006002        		    add #3074, R0
0522 0882 111046               		    movb (R0), -(SP)
0522 0884 004737 004044        		    jsr PC, @#2084
0522 0888 062706 000002        		    add #2, SP
0522 088C 010046               		    mov R0, -(SP)
0522 088E 016646 000012        		    mov 10(SP), -(SP)
0522 0892 016646 000012        		    mov 10(SP), -(SP)
0522 0896 004737 005032        		    jsr PC, @#2586
0522 089A 062706 000004        		    add #4, SP
0522 089E 010001               		    mov R0, R1
0522 08A0 012600               		    mov (SP)+, R0
0522 08A2 012602               		    mov (SP)+, R2
0522 08A4 012603               		    mov (SP)+, R3
0522 08A6 004737 001102        		    jsr PC, @#578
0522 08AA 000207               		    ret
0522 08AC                      		puttext2:
0522 08AC 162706 000002        		    sub #2, SP
0522 08B0                      		//194     do
0522 08B0                      		//195     {
0522 08B0 016600 000004        		    mov 4(SP), R0
0522 08B4 005266 000004        		    inc 4(SP)
0522 08B8 111000               		    movb (R0), R0
0522 08BA 110066 000000        		    movb R0, 0(SP)
0522 08BE                      		//197         gotoxy(x, (uint8_t)*a++);
0522 08BE 016600 000004        		    mov 4(SP), R0
0522 08C2 005266 000004        		    inc 4(SP)
0522 08C6 111000               		    movb (R0), R0
0522 08C8 042700 177400        		    bic #65280, R0
0522 08CC 010046               		    mov R0, -(SP)
0522 08CE 116600 000002        		    movb 2(SP), R0
0522 08D2 042700 177400        		    bic #65280, R0
0522 08D6 010001               		    mov R0, R1
0522 08D8 012602               		    mov (SP)+, R2
0522 08DA 104024               		    emt 20.
0522 08DC                      		//198         a = puttext(a,0);
0522 08DC 012746 000000        		    mov #0, -(SP)
0522 08E0 016601 000006        		    mov 6(SP), R1
0522 08E4 012602               		    mov (SP)+, R2
0522 08E6 104020               		    emt 16.
0522 08E8 010100               		    mov R1, R0
0522 08EA 010066 000004        		    mov R0, 4(SP)
0522 08EE                      		//200     while(*a);
0522 08EE 117600 000004        		    movb @4(SP), R0
0522 08F2 005700               		    tst R0
0522 08F4 001335               		    bne 08B0h
0522 08F6 062706 000002        		    add #2, SP
0522 08FA 000207               		    ret
0522 08FC                      		getc2:
0522 08FC                      		//205     return (*(uint8_t*)0177660 & 128) ? *(uint8_t*)0177662 : 0;
0522 08FC 113700 177660        		    movb @#65456, R0
0522 0900 142700 177577        		    bicb #65407, R0
0522 0904 005700               		    tst R0
0522 0906 001403               		    beq 090Eh
0522 0908 113700 177662        		    movb @#65458, R0
0522 090C 000402               		    br 0912h
0522 090E 012700 000000        		    mov #0, R0
0522 0912 000207               		    ret
0522 0914                      		main:
0522 0914                      		//210     if((displaystatus() & 1) == 0) putc(0233); // Включение режима 256x256
0522 0914 104034               		    emt 28.
0522 0916 042700 177776        		    bic #65534, R0
0522 091A 022700 000000        		    cmp #0, R0
0522 091E 001003               		    bne 0926h
0522 0920                      		//210     if((displaystatus() & 1) == 0) putc(0233); // Включение режима 256x256
0522 0920 112700 000233        		    movb #155, R0
0522 0924 104016               		    emt 14.
0522 0926                      		//211     putc(0x9A); // Выключение курсора
0522 0926 112700 000232        		    movb #154, R0
0522 092A 104016               		    emt 14.
0522 092C                      		//212     *(uint16_t*)0177706 = 731; // Запуск таймера
0522 092C 012737 001333 177706 		    mov #731, @#65478
0522 0932                      		//213     *(uint16_t*)0177712 = 0160; // Запуск таймера
0522 0932 012737 000160 177712 		    mov #112, @#65482
0522 0938                      		//214     *(uint16_t*)0177660 = 64; // Выключаем прерывание клавиатуры
0522 0938 012737 000100 177660 		    mov #64, @#65456
0522 093E                      		//216     gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486;
0522 093E 012737 000015 005752 		    mov #13, @#3050
0522 0944                      		//216     gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486;
0522 0944 012737 000012 005754 		    mov #10, @#3052
0522 094A                      		//216     gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486;
0522 094A 012737 000024 005772 		    mov #20, @#3066
0522 0950                      		//216     gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486;
0522 0950 012737 050006 005770 		    mov #20486, @#3064
0522 0956                      		//217     startGame();
0522 0956 004737 001240        		    jsr PC, @#672
0522 095A                      		//219     for(;;)
0522 095A                      		//220     {
0522 095A 004737 001144        		    jsr PC, @#612
0522 095E                      		//222         draw((void*)045020, bmpLogo, 32, 32);
0522 095E 012746 000040        		    mov #32, -(SP)
0522 0962 012746 000040        		    mov #32, -(SP)
0522 0966 012746 007236        		    mov #3742, -(SP)
0522 096A 012701 045020        		    mov #18960, R1
0522 096E 012600               		    mov (SP)+, R0
0522 0970 012602               		    mov (SP)+, R2
0522 0972 012603               		    mov (SP)+, R3
0522 0974 004737 001102        		    jsr PC, @#578
0522 0978                      		//223         puttext2(txtMenu);
0522 0978 012746 007002        		    mov #3586, -(SP)
0522 097C 004737 004254        		    jsr PC, @#2220
0522 0980 062706 000002        		    add #2, SP
0522 0984                      		//224         for(;;)
0522 0984                      		//225         {
0522 0984 004737 001170        		    jsr PC, @#632
0522 0988                      		//227             switch(getc2())
0522 0988 004737 004374        		    jsr PC, @#2300
0522 098C 004737 001044        		    jsr PC, @#548
0522 0990 004644               		    jsr SP, -(R4)
0522 0992 000060               		    
0522 0994 004676 000061        		    jsr SP, @49(SP)
0522 0998 004730               		    jsr PC, @(R0)+
0522 099A 000062               		    
0522 099C 004762 000063        		    jsr PC, 51(R2)
0522 09A0 000000               		    halt
0522 09A2 005014               		    clr (R4)
0522 09A4                      		//229                 case '0': gameWidth=9;  gameHeight=9;  bombsCnt=3;  playfieldVA=21006; break;
0522 09A4                      		//229                 case '0': gameWidth=9;  gameHeight=9;  bombsCnt=3;  playfieldVA=21006; break;
0522 09A4 012737 000011 005752 		    mov #9, @#3050
0522 09AA                      		//229                 case '0': gameWidth=9;  gameHeight=9;  bombsCnt=3;  playfieldVA=21006; break;
0522 09AA 012737 000011 005754 		    mov #9, @#3052
0522 09B0                      		//229                 case '0': gameWidth=9;  gameHeight=9;  bombsCnt=3;  playfieldVA=21006; break;
0522 09B0 012737 000003 005772 		    mov #3, @#3066
0522 09B6                      		//229                 case '0': gameWidth=9;  gameHeight=9;  bombsCnt=3;  playfieldVA=21006; break;
0522 09B6 012737 051016 005770 		    mov #21006, @#3064
0522 09BC                      		//229                 case '0': gameWidth=9;  gameHeight=9;  bombsCnt=3;  playfieldVA=21006; break;
0522 09BC 000450               		    br 0A0Eh
0522 09BE                      		//230                 case '1': gameWidth=9;  gameHeight=9;  bombsCnt=10; playfieldVA=21006; break;
0522 09BE                      		//230                 case '1': gameWidth=9;  gameHeight=9;  bombsCnt=10; playfieldVA=21006; break;
0522 09BE 012737 000011 005752 		    mov #9, @#3050
0522 09C4                      		//230                 case '1': gameWidth=9;  gameHeight=9;  bombsCnt=10; playfieldVA=21006; break;
0522 09C4 012737 000011 005754 		    mov #9, @#3052
0522 09CA                      		//230                 case '1': gameWidth=9;  gameHeight=9;  bombsCnt=10; playfieldVA=21006; break;
0522 09CA 012737 000012 005772 		    mov #10, @#3066
0522 09D0                      		//230                 case '1': gameWidth=9;  gameHeight=9;  bombsCnt=10; playfieldVA=21006; break;
0522 09D0 012737 051016 005770 		    mov #21006, @#3064
0522 09D6                      		//230                 case '1': gameWidth=9;  gameHeight=9;  bombsCnt=10; playfieldVA=21006; break;
0522 09D6 000433               		    br 0A0Eh
0522 09D8                      		//231                 case '2': gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486; break;
0522 09D8                      		//231                 case '2': gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486; break;
0522 09D8 012737 000015 005752 		    mov #13, @#3050
0522 09DE                      		//231                 case '2': gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486; break;
0522 09DE 012737 000012 005754 		    mov #10, @#3052
0522 09E4                      		//231                 case '2': gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486; break;
0522 09E4 012737 000024 005772 		    mov #20, @#3066
0522 09EA                      		//231                 case '2': gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486; break;
0522 09EA 012737 050006 005770 		    mov #20486, @#3064
0522 09F0                      		//231                 case '2': gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486; break;
0522 09F0 000416               		    br 0A0Eh
0522 09F2                      		//232                 case '3': gameWidth=16; gameHeight=14; bombsCnt=43; playfieldVA=18432; break;
0522 09F2                      		//232                 case '3': gameWidth=16; gameHeight=14; bombsCnt=43; playfieldVA=18432; break;
0522 09F2 012737 000020 005752 		    mov #16, @#3050
0522 09F8                      		//232                 case '3': gameWidth=16; gameHeight=14; bombsCnt=43; playfieldVA=18432; break;
0522 09F8 012737 000016 005754 		    mov #14, @#3052
0522 09FE                      		//232                 case '3': gameWidth=16; gameHeight=14; bombsCnt=43; playfieldVA=18432; break;
0522 09FE 012737 000053 005772 		    mov #43, @#3066
0522 0A04                      		//232                 case '3': gameWidth=16; gameHeight=14; bombsCnt=43; playfieldVA=18432; break;
0522 0A04 012737 044000 005770 		    mov #18432, @#3064
0522 0A0A                      		//232                 case '3': gameWidth=16; gameHeight=14; bombsCnt=43; playfieldVA=18432; break;
0522 0A0A 000401               		    br 0A0Eh
0522 0A0C                      		//233                 default: continue;
0522 0A0C                      		//233                 default: continue;
0522 0A0C 000673               		    br 0984h
0522 0A0E                      		//235             break;
0522 0A0E 000401               		    br 0A12h
0522 0A10 000671               		    br 0984h
0522 0A12                      		//238         startGame();
0522 0A12 004737 001240        		    jsr PC, @#672
0522 0A16 000641               		    br 095Ah
0522 0A18 000207               		    ret
0522 0A1A                      		calcCell2:
0522 0A1A                      		//371     return (y<<10) + (x<<2) + playfieldVA;
0522 0A1A 016600 000004        		    mov 4(SP), R0
0522 0A1E 006100               		    rol R0
0522 0A20 006100               		    rol R0
0522 0A22 006100               		    rol R0
0522 0A24 006100               		    rol R0
0522 0A26 006100               		    rol R0
0522 0A28 006100               		    rol R0
0522 0A2A 006100               		    rol R0
0522 0A2C 006100               		    rol R0
0522 0A2E 006100               		    rol R0
0522 0A30 006100               		    rol R0
0522 0A32 042700 001777        		    bic #1023, R0
0522 0A36 010046               		    mov R0, -(SP)
0522 0A38 016600 000004        		    mov 4(SP), R0
0522 0A3C 006100               		    rol R0
0522 0A3E 006100               		    rol R0
0522 0A40 042700 000003        		    bic #3, R0
0522 0A44 010001               		    mov R0, R1
0522 0A46 012600               		    mov (SP)+, R0
0522 0A48 060100               		    add R1, R0
0522 0A4A 063700 005770        		    add @#3064, R0
0522 0A4E 000207               		    ret
0522 0A50                      		get:
0522 0A50                      		//386     if(x >= gameWidth || y >= gameHeight) return 0;
0522 0A50 023766 005752 000002 		    cmp @#3050, 2(SP)
0522 0A56 101404               		    blos 0A60h
0522 0A58 023766 005754 000004 		    cmp @#3052, 4(SP)
0522 0A5E 101003               		    bhi 0A66h
0522 0A60                      		//386     if(x >= gameWidth || y >= gameHeight) return 0;
0522 0A60 012700 000000        		    mov #0, R0
0522 0A64 000207               		    ret
0522 0A66                      		//387     if(playfield[(y << 4) + x] == 0x80) return 1;
0522 0A66 016600 000004        		    mov 4(SP), R0
0522 0A6A 006100               		    rol R0
0522 0A6C 006100               		    rol R0
0522 0A6E 006100               		    rol R0
0522 0A70 006100               		    rol R0
0522 0A72 042700 000017        		    bic #15, R0
0522 0A76 066600 000002        		    add 2(SP), R0
0522 0A7A 062700 006002        		    add #3074, R0
0522 0A7E 111000               		    movb (R0), R0
0522 0A80 122700 000200        		    cmpb #128, R0
0522 0A84 001003               		    bne 0A8Ch
0522 0A86                      		//387     if(playfield[(y << 4) + x] == 0x80) return 1;
0522 0A86 012700 000001        		    mov #1, R0
0522 0A8A 000207               		    ret
0522 0A8C                      		//388     return 0;
0522 0A8C 012700 000000        		    mov #0, R0
0522 0A90 000207               		    ret
0522 0A92                      		mget:
0522 0A92 162706 000002        		    sub #2, SP
0522 0A96                      		//393     unsigned n = 1;
0522 0A96 012766 000001 000000 		    mov #1, 0(SP)
0522 0A9C                      		//394     n += get(x-1,y-1);
0522 0A9C 016600 000006        		    mov 6(SP), R0
0522 0AA0 162700 000001        		    sub #1, R0
0522 0AA4 010046               		    mov R0, -(SP)
0522 0AA6 016600 000006        		    mov 6(SP), R0
0522 0AAA 162700 000001        		    sub #1, R0
0522 0AAE 010046               		    mov R0, -(SP)
0522 0AB0 004737 005120        		    jsr PC, @#2640
0522 0AB4 062706 000004        		    add #4, SP
0522 0AB8 060066 000000        		    add R0, 0(SP)
0522 0ABC                      		//395     n += get(x,y-1);
0522 0ABC 016600 000006        		    mov 6(SP), R0
0522 0AC0 162700 000001        		    sub #1, R0
0522 0AC4 010046               		    mov R0, -(SP)
0522 0AC6 016646 000006        		    mov 6(SP), -(SP)
0522 0ACA 004737 005120        		    jsr PC, @#2640
0522 0ACE 062706 000004        		    add #4, SP
0522 0AD2 060066 000000        		    add R0, 0(SP)
0522 0AD6                      		//396     n += get(x+1,y-1); 
0522 0AD6 016600 000006        		    mov 6(SP), R0
0522 0ADA 162700 000001        		    sub #1, R0
0522 0ADE 010046               		    mov R0, -(SP)
0522 0AE0 016600 000006        		    mov 6(SP), R0
0522 0AE4 062700 000001        		    add #1, R0
0522 0AE8 010046               		    mov R0, -(SP)
0522 0AEA 004737 005120        		    jsr PC, @#2640
0522 0AEE 062706 000004        		    add #4, SP
0522 0AF2 060066 000000        		    add R0, 0(SP)
0522 0AF6                      		//397     n += get(x-1,y);
0522 0AF6 016646 000006        		    mov 6(SP), -(SP)
0522 0AFA 016600 000006        		    mov 6(SP), R0
0522 0AFE 162700 000001        		    sub #1, R0
0522 0B02 010046               		    mov R0, -(SP)
0522 0B04 004737 005120        		    jsr PC, @#2640
0522 0B08 062706 000004        		    add #4, SP
0522 0B0C 060066 000000        		    add R0, 0(SP)
0522 0B10                      		//398     n += get(x+1,y); 
0522 0B10 016646 000006        		    mov 6(SP), -(SP)
0522 0B14 016600 000006        		    mov 6(SP), R0
0522 0B18 062700 000001        		    add #1, R0
0522 0B1C 010046               		    mov R0, -(SP)
0522 0B1E 004737 005120        		    jsr PC, @#2640
0522 0B22 062706 000004        		    add #4, SP
0522 0B26 060066 000000        		    add R0, 0(SP)
0522 0B2A                      		//399     n += get(x-1,y+1);
0522 0B2A 016600 000006        		    mov 6(SP), R0
0522 0B2E 062700 000001        		    add #1, R0
0522 0B32 010046               		    mov R0, -(SP)
0522 0B34 016600 000006        		    mov 6(SP), R0
0522 0B38 162700 000001        		    sub #1, R0
0522 0B3C 010046               		    mov R0, -(SP)
0522 0B3E 004737 005120        		    jsr PC, @#2640
0522 0B42 062706 000004        		    add #4, SP
0522 0B46 060066 000000        		    add R0, 0(SP)
0522 0B4A                      		//400     n += get(x,y+1);
0522 0B4A 016600 000006        		    mov 6(SP), R0
0522 0B4E 062700 000001        		    add #1, R0
0522 0B52 010046               		    mov R0, -(SP)
0522 0B54 016646 000006        		    mov 6(SP), -(SP)
0522 0B58 004737 005120        		    jsr PC, @#2640
0522 0B5C 062706 000004        		    add #4, SP
0522 0B60 060066 000000        		    add R0, 0(SP)
0522 0B64                      		//401     n += get(x+1,y+1);
0522 0B64 016600 000006        		    mov 6(SP), R0
0522 0B68 062700 000001        		    add #1, R0
0522 0B6C 010046               		    mov R0, -(SP)
0522 0B6E 016600 000006        		    mov 6(SP), R0
0522 0B72 062700 000001        		    add #1, R0
0522 0B76 010046               		    mov R0, -(SP)
0522 0B78 004737 005120        		    jsr PC, @#2640
0522 0B7C 062706 000004        		    add #4, SP
0522 0B80 060066 000000        		    add R0, 0(SP)
0522 0B84                      		//402     playfield[(y << 4) + x] = n;
0522 0B84 016600 000006        		    mov 6(SP), R0
0522 0B88 006100               		    rol R0
0522 0B8A 006100               		    rol R0
0522 0B8C 006100               		    rol R0
0522 0B8E 006100               		    rol R0
0522 0B90 042700 000017        		    bic #15, R0
0522 0B94 066600 000004        		    add 4(SP), R0
0522 0B98 062700 006002        		    add #3074, R0
0522 0B9C 016601 000000        		    mov 0(SP), R1
0522 0BA0 110110               		    movb R1, (R0)
0522 0BA2                      		//403     return n;
0522 0BA2 016600 000000        		    mov 0(SP), R0
0522 0BA6 062706 000002        		    add #2, SP
0522 0BAA 000207               		    ret
0522 0BAC                      		drawNumber:
0522 0BAC 162706 000002        		    sub #2, SP
0522 0BB0                      		//475     uint8_t c=3;
0522 0BB0 112766 000003 000000 		    movb #3, 0(SP)
0522 0BB6                      		//476     do
0522 0BB6                      		//477     {
0522 0BB6 012746 000025        		    mov #21, -(SP)
0522 0BBA 012746 000003        		    mov #3, -(SP)
0522 0BBE 012746 014256        		    mov #6318, -(SP)
0522 0BC2 016601 000012        		    mov 10(SP), R1
0522 0BC6 012600               		    mov (SP)+, R0
0522 0BC8 012602               		    mov (SP)+, R2
0522 0BCA 012603               		    mov (SP)+, R3
0522 0BCC 004737 001102        		    jsr PC, @#578
0522 0BD0                      		//481         d -= 3;
0522 0BD0 162766 000003 000004 		    sub #3, 4(SP)
0522 0BD6                      		//482     } while(--c);
0522 0BD6 012700 000000        		    mov #0, R0
0522 0BDA 060600               		    add SP, R0
0522 0BDC 105310               		    decb (R0)
0522 0BDE 111000               		    movb (R0), R0
0522 0BE0 005700               		    tst R0
0522 0BE2 001351               		    bne 0BB6h
0522 0BE4 062706 000002        		    add #2, SP
0522 0BE8 000207               		    ret
0525 0E7A                      		drawTransImage:
0526 0E7A 012702 000020        		    MOV     #16, R2
0527 0E7E 042011               		drawTransImag1:	BIC     (R0)+, (R1)
0528 0E80 052021               		    BIS     (R0)+, (R1)+
0529 0E82 042011               		    BIC     (R0)+, (R1)
0530 0E84 052021               		    BIS     (R0)+, (R1)+
0531 0E86 062701 000074        		    ADD     #60, R1                        
0532 0E8A 077207               		    SOB	    R2, drawTransImag1
0533 0E8C 000207               		    RTS     PC
0537 0E8E                      		drawImage:
0538 0E8E 012702 000020        		    MOV     #16, R2
0539 0E92                      		drawImage1:
0540 0E92 012021               		    MOV     (R0)+, (R1)+
0541 0E94 012021               		    MOV     (R0)+, (R1)+
0542 0E96 062701 000074        		    ADD     #60, R1
0543 0E9A 077205               		    SOB	R2, drawImage1
0544 0E9C 000207               		    RTS	PC
0548 0E9E                      		.include "resources.inc"
0001 0E9E 000000 012000 000000 		bmpLogo:   	insert_bitmap2 "resources/logo.bmp",  128, 37
0003 133E 000000 000000 000000 		bmpCursor:  	insert_bitmap2t "resources/cursor.bmp",  16, 16
0005 13BE 177777 037777 177777 		bmpF:    	insert_bitmap2 "resources/f.bmp", 16, 16
0006 13FE 177777 037777 177777 		bmpQ:    	insert_bitmap2 "resources/q.bmp", 16, 16
0008 143E 052525 052525 000001 		bmpB:    	insert_bitmap2 "resources/b.bmp",  16, 16
0010 147E 177777 037777 177777 		bmpUn:   	insert_bitmap2 "resources/un.bmp", 16, 16
0011 14BE 052525 052525 000001 		bmp0:    	insert_bitmap2 "resources/0.bmp",  16, 16
0012 14FE 052525 052525 000001 		bmp1:    	insert_bitmap2 "resources/1.bmp",  16, 16
0013 153E 052525 052525 000001 		bmp2:    	insert_bitmap2 "resources/2.bmp",  16, 16
0014 157E 052525 052525 000001 		bmp3:    	insert_bitmap2 "resources/3.bmp",  16, 16
0015 15BE 052525 052525 000001 		bmp4:    	insert_bitmap2 "resources/4.bmp",  16, 16
0016 15FE 052525 052525 000001 		bmp5:    	insert_bitmap2 "resources/5.bmp",  16, 16
0017 163E 052525 052525 000001 		bmp6:    	insert_bitmap2 "resources/6.bmp",  16, 16
0018 167E 052525 052525 000001 		bmp7:    	insert_bitmap2 "resources/7.bmp",  16, 16
0019 16BE 052525 052525 000001 		bmp8:    	insert_bitmap2 "resources/8.bmp",  16, 16
0021 16FE 177777 177777 037777 		bmpGood: 	insert_bitmap2 "resources/good.bmp", 24, 24
0022 178E 177777 177777 037777 		bmpBad:  	insert_bitmap2 "resources/bad.bmp", 24, 24
0023 181E 177777 177777 037777 		bmpWin:  	insert_bitmap2 "resources/win.bmp", 24, 24
0025 18AE 177774 171417 031777 		bmpN0:   	insert_bitmap2 "resources/n0.bmp", 12, 21
0026 18EE 010420 040401 030104 		bmpN1:   	insert_bitmap2 "resources/n1.bmp", 12, 21
0027 192E 177774 170417 031777 		bmpN2:   	insert_bitmap2 "resources/n2.bmp", 12, 21
0028 196E 177774 170417 031777 		bmpN3:   	insert_bitmap2 "resources/n3.bmp", 12, 21
0029 19AE 010420 041401 030104 		bmpN4:   	insert_bitmap2 "resources/n4.bmp", 12, 21
0030 19EE 177774 171417 011777 		bmpN5:   	insert_bitmap2 "resources/n5.bmp", 12, 21
0031 1A2E 177774 171417 011777 		bmpN6:   	insert_bitmap2 "resources/n6.bmp", 12, 21
0032 1A6E 177774 170417 031777 		bmpN7:   	insert_bitmap2 "resources/n7.bmp", 12, 21
0033 1AAE 177774 171417 031777 		bmpN8:   	insert_bitmap2 "resources/n8.bmp", 12, 21
0034 1AEE 177774 171417 031777 		bmpN9:   	insert_bitmap2 "resources/n9.bmp", 12, 21                          
0036 1B2E 042104 042100 010421 		bmpBlock:   	insert_bitmap2 "resources/block.bmp", 16, 16                       
0550 1B6E                      		endOfROM:              
0554 1B6E 