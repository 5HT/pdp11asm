0004 0000                      		CONVERT1251TOKOI8R
0005 0000                      		DECIMALNUMBERS
0006 0000                      		ORG 01000
0010 0200                      		EntryPoint:
0011 0200 012706 037776        		    MOV #3FFEh, SP
0012 0204 012707 004214        		    MOV #main, PC
0016 0208                      		SHLW:
0017 0208 042701 177760        		    BIC #0FFF0h, R1
0018 020C 001402               		    BEQ SHLW1
0019 020E                      		SHLW2:
0020 020E 060000               		    ADD R0, R0
0021 0210 077102               		    SOB R1, SHLW2
0022 0212                      		SHLW1:
0023 0212 000207               		    RTS PC
0027 0214                      		SHRW:
0028 0214 042701 177760        		    BIC #0FFF0h, R1
0029 0218 001403               		    BEQ SHRW1
0030 021A                      		SHRW2:
0031 021A 000241               		    CLC
0032 021C 006000               		    ROR R0
0033 021E 077103               		    SOB R1, SHRW2
0034 0220                      		SHRW1:
0035 0220 000207               		    RTS PC
0039 0222                      		__SWITCH:
0040 0222 012601               		    MOV (SP)+, R1
0041 0224                      		__SWITCH0:
0042 0224 012105               		    MOV (R1)+, R5
0043 0226 001403               		    BEQ __SWITCH1
0044 0228 020021               		    CMP R0, (R1)+
0045 022A 001374               		    BNE __SWITCH0
0046 022C 010507               		    MOV R5, PC
0047 022E                      		__SWITCH1:
0048 022E 012107               		    MOV (R1)+, PC
0052 0230                      		SGNB0:
0053 0230 042700 177400        		    BIC #0xFF00, R0
0054 0234 105700               		    TSTB R0
0055 0236 100002               		    BPL SGNB0R
0056 0238 052700 177400        		    BIS #0xFF00, R0
0057 023C                      		SGNB0R:
0058 023C 000207               		    RTS PC
0064 023E                      		DIVWU:
0065 023E 005005               		    CLR R5
0066 0240                      		DIVWU1:
0067 0240 160100               		    SUB R1, R0
0068 0242 103402               		    BCS DIVWU2
0069 0244 005205               		    INC R5
0070 0246 000774               		    BR DIVWU1
0071 0248                      		DIVWU2:
0072 0248 060100               		    ADD R1, R0
0073 024A 010067 000004        		    MOV R0, MOD_DIV
0074 024E 010500               		    MOV R5, R0
0075 0250 000207               		    RTS PC
0077 0252 000000               		MOD_DIV: DW 0
0082 0254                      		drawb:
0083 0254 010104               		    MOV R1, R4
0084 0256 010205               		    MOV R2, R5
0085 0258                      		drawb1:
0086 0258 112024               		    MOVB (R0)+,(R4)+
0087 025A 077502               		    SOB R5, drawb1
0088 025C 062701 000100        		    ADD #64., R1
0089 0260 077307               		    SOB R3, drawb
0090 0262 000207               		    RTS PC
0095 0264                      		draw:
0096 0264 010104               		    MOV R1, R4
0097 0266 010205               		    MOV R2, R5
0098 0268                      		draw1:
0099 0268 012024               		    MOV (R0)+,(R4)+
0100 026A 012024               		    MOV (R0)+,(R4)+
0101 026C 077503               		    SOB R5, draw1
0102 026E 062701 000100        		    ADD #64., R1
0103 0272 077310               		    SOB R3, draw
0104 0274 000207               		    RTS PC
0109 0276                      		drawa:
0110 0276 010104               		    MOV R1, R4
0111 0278 010205               		    MOV R2, R5
0112 027A                      		drawa1:
0113 027A 042014               		    BIC (R0)+,(R4)
0114 027C 052024               		    BIS (R0)+,(R4)+
0115 027E 077503               		    SOB R5, drawa1
0116 0280 062701 000100        		    ADD #64., R1
0117 0284 077310               		    SOB R3, drawa
0118 0286 000207               		    RTS PC
0122 0288                      		CLEARSCREEN:
0123 0288 012700 040000        		    MOV #4000h, R0
0124 028C 012701 004000        		    MOV #800h, R1
0125 0290                      		CLEARSCREEN1:
0126 0290 005020               		    CLR (R0)+
0127 0292 005020               		    CLR (R0)+
0128 0294 005020               		    CLR (R0)+
0129 0296 005020               		    CLR (R0)+
0130 0298 077105               		    SOB R1, CLEARSCREEN1
0131 029A 000207               		    RTS PC
0564 029C                      		rand:
0564 029C                      		//507     rand_state = (uint8_t)(rand_state << (uint8_t)2) + rand_state + (uint8_t)1;
0564 029C 113700 007012        		    movb @#3594, R0
0564 02A0 106300               		    aslb R0
0564 02A2 106300               		    aslb R0
0564 02A4 042700 177400        		    bic #65280, R0
0564 02A8 113701 007012        		    movb @#3594, R1
0564 02AC 042701 177400        		    bic #65280, R1
0564 02B0 060100               		    add R1, R0
0564 02B2 062700 000001        		    add #1, R0
0564 02B6 110037 007012        		    movb R0, @#3594
0564 02BA                      		//508     return rand_state;
0564 02BA 113700 007012        		    movb @#3594, R0
0564 02BE 000207               		    ret
0564 02C0 000207               		    ret
0564 02C2                      		startGame:
0564 02C2 162706 000006        		    sub #6, SP
0564 02C6                      		//280     gameWidth1 = gameWidth-1;
0564 02C6 013700 006222        		    mov @#3218, R0
0564 02CA 162700 000001        		    sub #1, R0
0564 02CE 010037 006226        		    mov R0, @#3222
0564 02D2                      		//281     gameHeight1 = gameHeight-1;
0564 02D2 013700 006224        		    mov @#3220, R0
0564 02D6 162700 000001        		    sub #1, R0
0564 02DA 010037 006230        		    mov R0, @#3224
0564 02DE                      		//284     {   clearScreen();
0564 02DE 004737 001210        		    jsr PC, @#648
0564 02E2                      		//286         uint8_t* a = (uint8_t*)(040000 + 64*16*2);
0564 02E2 012766 044000 000004 		    mov #18432, 4(SP)
0564 02E8                      		//287         for(y=0; y<14; y++, a+=64*15)
0564 02E8 012766 000000 000002 		    mov #0, 2(SP)
0564 02EE 022766 000016 000002 		    cmp #14, 2(SP)
0564 02F4 101440               		    blos 0336h
0564 02F6                      		//288             for(x=0; x<16; x++, a+=4)
0564 02F6 012766 000000 000000 		    mov #0, 0(SP)
0564 02FC 022766 000020 000000 		    cmp #16, 0(SP)
0564 0302 101423               		    blos 032Ah
0564 0304                      		//289                 draw(a, bmpBlock, 1, 16);
0564 0304 012746 000020        		    mov #16, -(SP)
0564 0308 012746 000001        		    mov #1, -(SP)
0564 030C 012746 015300        		    mov #6848, -(SP)
0564 0310 016601 000012        		    mov 10(SP), R1
0564 0314 012600               		    mov (SP)+, R0
0564 0316 012602               		    mov (SP)+, R2
0564 0318 012603               		    mov (SP)+, R3
0564 031A 004737 001144        		    jsr PC, @#612
0564 031E 005266 000000        		    inc 0(SP)
0564 0322 062766 000004 000004 		    add #4, 4(SP)
0564 0328 000751               		    br 02FCh
0564 032A 005266 000002        		    inc 2(SP)
0564 032E 062766 001700 000004 		    add #960, 4(SP)
0564 0334 000734               		    br 02EEh
0564 0336                      		//293     cursorX = gameWidth >> 1;
0564 0336 013700 006222        		    mov @#3218, R0
0564 033A 000241               		    clc
0564 033C 006000               		    ror R0
0564 033E 010037 006234        		    mov R0, @#3228
0564 0342                      		//294     cursorY = gameHeight >> 1;
0564 0342 013700 006224        		    mov @#3220, R0
0564 0346 000241               		    clc
0564 0348 006000               		    ror R0
0564 034A 010037 006236        		    mov R0, @#3230
0564 034E                      		//295     bombsPutted = 0;
0564 034E 012737 000000 006244 		    mov #0, @#3236
0564 0354                      		//296     gameOverFlag = 0;
0564 0354 012737 000000 006232 		    mov #0, @#3226
0564 035A                      		//297     time = 0;
0564 035A 012737 000000 006246 		    mov #0, @#3238
0564 0360                      		//300     {   unsigned i = 0;
0564 0360 012766 000000 000000 		    mov #0, 0(SP)
0564 0366                      		//301         do
0564 0366                      		//302         {
0564 0366 016600 000000        		    mov 0(SP), R0
0564 036A 062700 006252        		    add #3242, R0
0564 036E 112710 000000        		    movb #0, (R0)
0564 0372                      		//304             i++;
0564 0372 005266 000000        		    inc 0(SP)
0564 0376                      		//305         } while(i != 256);
0564 0376 022766 000400 000000 		    cmp #256, 0(SP)
0564 037C 001364               		    bne 0366h
0564 037E                      		//309     drawSmile(bmpGood);
0564 037E 012746 013220        		    mov #5776, -(SP)
0564 0382 004737 002416        		    jsr PC, @#1294
0564 0386 062706 000002        		    add #2, SP
0564 038A                      		//312     drawPlayField();
0564 038A 004737 002452        		    jsr PC, @#1322
0564 038E                      		//315     leftNumber();
0564 038E 004737 002560        		    jsr PC, @#1392
0564 0392                      		//316     rightNumber();
0564 0392 004737 002710        		    jsr PC, @#1480
0564 0396                      		//318     for(;;)
0564 0396                      		//319     {
0564 0396 004737 001234        		    jsr PC, @#668
0564 039A                      		//322         if(!gameOverFlag && time!=999)
0564 039A 013700 006232        		    mov @#3226, R0
0564 039E 005700               		    tst R0
0564 03A0 001033               		    bne 03D8h
0564 03A2 022737 001747 006246 		    cmp #999, @#3238
0564 03A8 001427               		    beq 03D8h
0564 03AA                      		//323         {
0564 03AA 022737 000555 177710 		    cmp #365, @#65480
0564 03B0 103403               		    blo 03B8h
0564 03B2 012700 000001        		    mov #1, R0
0564 03B6 000401               		    br 03BAh
0564 03B8 005000               		    clr R0
0564 03BA 110066 000000        		    movb R0, 0(SP)
0564 03BE                      		//325             if(t != lastTimer)
0564 03BE 116600 000000        		    movb 0(SP), R0
0564 03C2 113701 006250        		    movb @#3240, R1
0564 03C6 120100               		    cmpb R1, R0
0564 03C8 001407               		    beq 03D8h
0564 03CA                      		//326             {
0564 03CA 116637 000000 006250 		    movb 0(SP), @#3240
0564 03D0                      		//328     		time++;
0564 03D0 005237 006246        		    inc @#3238
0564 03D4                      		//329                 rightNumber();
0564 03D4 004737 002710        		    jsr PC, @#1480
0564 03D8                      		//334         switch(getc2())
0564 03D8 004737 004136        		    jsr PC, @#2142
0564 03DC 004737 001042        		    jsr PC, @#546
0564 03E0 001774               		    beq 03DAh
0564 03E2 000000               		    halt
0564 03E4 002000               		    bge 03E6h
0564 03E6 000010               		    
0564 03E8 002032               		    bge 041Eh
0564 03EA 000031               		    
0564 03EC 002066               		    bge 045Ah
0564 03EE 000032               		    
0564 03F0 002114               		    bge 048Ah
0564 03F2 000033               		    
0564 03F4 002150               		    bge 04C6h
0564 03F6 000040               		    
0564 03F8 000000               		    halt
0564 03FA 002222               		    bge 0320h
0564 03FC                      		//336             case 0:
0564 03FC                      		//337                 break;
0564 03FC 012707 002404        		    mov #1284, PC
0564 0400                      		//338             case 8:
0564 0400                      		//339                 if(cursorX==0) continue;
0564 0400 022737 000000 006234 		    cmp #0, @#3228
0564 0406 001707               		    beq 0396h
0564 0408                      		//340                 hideCursor();
0564 0408 004737 002732        		    jsr PC, @#1498
0564 040C                      		//341                 cursorX--;
0564 040C 005337 006234        		    dec @#3228
0564 0410                      		//342                 drawCursor();
0564 0410 004737 002754        		    jsr PC, @#1516
0564 0414                      		//343                 continue;
0564 0414 000700               		    br 0396h
0564 0416                      		//344                 break;
0564 0416 012707 002404        		    mov #1284, PC
0564 041A                      		//345             case 0x19:
0564 041A                      		//346                 if(cursorX+1 == gameWidth) continue;
0564 041A 013700 006234        		    mov @#3228, R0
0564 041E 062700 000001        		    add #1, R0
0564 0422 023700 006222        		    cmp @#3218, R0
0564 0426 001667               		    beq 0396h
0564 0428                      		//347                 hideCursor();
0564 0428 004737 002732        		    jsr PC, @#1498
0564 042C                      		//348                 cursorX++;
0564 042C 005237 006234        		    inc @#3228
0564 0430                      		//349                 drawCursor();
0564 0430 004737 002754        		    jsr PC, @#1516
0564 0434                      		//350                 break;
0564 0434 000547               		    br 0504h
0564 0436                      		//351             case 0x1A:
0564 0436                      		//352                 if(cursorY == 0) continue;
0564 0436 022737 000000 006236 		    cmp #0, @#3230
0564 043C 001654               		    beq 0396h
0564 043E                      		//353                 hideCursor();
0564 043E 004737 002732        		    jsr PC, @#1498
0564 0442                      		//354                 cursorY--;
0564 0442 005337 006236        		    dec @#3230
0564 0446                      		//355                 drawCursor();
0564 0446 004737 002754        		    jsr PC, @#1516
0564 044A                      		//356                 break;
0564 044A 000534               		    br 0504h
0564 044C                      		//357             case 0x1B:
0564 044C                      		//358                 if(cursorY+1 == gameHeight) continue;
0564 044C 013700 006236        		    mov @#3230, R0
0564 0450 062700 000001        		    add #1, R0
0564 0454 023700 006224        		    cmp @#3220, R0
0564 0458 001636               		    beq 0396h
0564 045A                      		//359                 hideCursor();
0564 045A 004737 002732        		    jsr PC, @#1498
0564 045E                      		//360                 cursorY++;
0564 045E 005237 006236        		    inc @#3230
0564 0462                      		//361                 drawCursor();
0564 0462 004737 002754        		    jsr PC, @#1516
0564 0466                      		//362                 break;
0564 0466 000516               		    br 0504h
0564 0468                      		//363             case ' ':
0564 0468                      		//364                 if(gameOverFlag) return;
0564 0468 013700 006232        		    mov @#3226, R0
0564 046C 005700               		    tst R0
0564 046E 001401               		    beq 0472h
0564 0470                      		//364                 if(gameOverFlag) return;
0564 0470 000513               		    br 0508h
0564 0472                      		//365                 if(!bombsPutted) putBombs();
0564 0472 013700 006244        		    mov @#3236, R0
0564 0476 005700               		    tst R0
0564 0478 001002               		    bne 047Eh
0564 047A                      		//365                 if(!bombsPutted) putBombs();
0564 047A 004737 003026        		    jsr PC, @#1558
0564 047E                      		//366             	open(cursorX, cursorY);
0564 047E 013746 006236        		    mov @#3230, -(SP)
0564 0482 013746 006234        		    mov @#3228, -(SP)
0564 0486 004737 003326        		    jsr PC, @#1750
0564 048A 062706 000004        		    add #4, SP
0564 048E                      		//367                 continue;
0564 048E 012707 001626        		    mov #918, PC
0564 0492                      		//368             default:
0564 0492                      		//369                 if(gameOverFlag) return;
0564 0492 013700 006232        		    mov @#3226, R0
0564 0496 005700               		    tst R0
0564 0498 001401               		    beq 049Ch
0564 049A                      		//369                 if(gameOverFlag) return;
0564 049A 000466               		    br 0508h
0564 049C                      		//370                 uint8_t* a = &playfield[cursorX + (cursorY << 4)];
0564 049C 013700 006236        		    mov @#3230, R0
0564 04A0 006300               		    asl R0
0564 04A2 006300               		    asl R0
0564 04A4 006300               		    asl R0
0564 04A6 006300               		    asl R0
0564 04A8 063700 006234        		    add @#3228, R0
0564 04AC 062700 006252        		    add #3242, R0
0564 04B0 010066 000000        		    mov R0, 0(SP)
0564 04B4                      		//371                 uint8_t v = *a;
0564 04B4 117666 000000 000002 		    movb @0(SP), 2(SP)
0564 04BA                      		//372                 if((v & 0x7F) > 2) continue;
0564 04BA 116600 000002        		    movb 2(SP), R0
0564 04BE 142700 177600        		    bicb #65408, R0
0564 04C2 122700 000002        		    cmpb #2, R0
0564 04C6 002002               		    bge 04CCh
0564 04C8 012707 001626        		    mov #918, PC
0564 04CC                      		//373                 v++;
0564 04CC 105266 000002        		    incb 2(SP)
0564 04D0                      		//374                 if((v & 0x7F) == 3) v = v - 3;
0564 04D0 116600 000002        		    movb 2(SP), R0
0564 04D4 142700 177600        		    bicb #65408, R0
0564 04D8 122700 000003        		    cmpb #3, R0
0564 04DC 001010               		    bne 04EEh
0564 04DE                      		//374                 if((v & 0x7F) == 3) v = v - 3;
0564 04DE 116600 000002        		    movb 2(SP), R0
0564 04E2 042700 177400        		    bic #65280, R0
0564 04E6 162700 000003        		    sub #3, R0
0564 04EA 110066 000002        		    movb R0, 2(SP)
0564 04EE                      		//375                 *a = v;
0564 04EE 116676 000002 000000 		    movb 2(SP), @0(SP)
0564 04F4                      		//376                 hideCursor();
0564 04F4 004737 002732        		    jsr PC, @#1498
0564 04F8                      		//377             	drawCursor();
0564 04F8 004737 002754        		    jsr PC, @#1516
0564 04FC                      		//378                 leftNumber();
0564 04FC 004737 002560        		    jsr PC, @#1392
0564 0500                      		//379                 continue;
0564 0500 012707 001626        		    mov #918, PC
0564 0504 012707 001626        		    mov #918, PC
0564 0508 062706 000006        		    add #6, SP
0564 050C 000207               		    ret
0564 050E                      		drawSmile:
0564 050E                      		//547     drawb((void*)040435, img, 6, 24);
0564 050E 012746 000030        		    mov #24, -(SP)
0564 0512 012746 000006        		    mov #6, -(SP)
0564 0516 016646 000006        		    mov 6(SP), -(SP)
0564 051A 012701 040435        		    mov #16669, R1
0564 051E 012600               		    mov (SP)+, R0
0564 0520 012602               		    mov (SP)+, R2
0564 0522 012603               		    mov (SP)+, R3
0564 0524 004737 001124        		    jsr PC, @#596
0564 0528 000207               		    ret
0564 052A                      		drawPlayField:
0564 052A 162706 000004        		    sub #4, SP
0564 052E                      		//557     for(y=0; y<gameHeight; y++)
0564 052E 012766 000000 000002 		    mov #0, 2(SP)
0564 0534 023766 006224 000002 		    cmp @#3220, 2(SP)
0564 053A 101425               		    blos 0566h
0564 053C                      		//558         for(x=0; x<gameWidth; x++)
0564 053C 012766 000000 000000 		    mov #0, 0(SP)
0564 0542 023766 006222 000000 		    cmp @#3218, 0(SP)
0564 0548 101413               		    blos 0560h
0564 054A                      		//559            redrawCell012(x,y);
0564 054A 016646 000002        		    mov 2(SP), -(SP)
0564 054E 016646 000002        		    mov 2(SP), -(SP)
0564 0552 004737 003710        		    jsr PC, @#1992
0564 0556 062706 000004        		    add #4, SP
0564 055A 005266 000000        		    inc 0(SP)
0564 055E 000761               		    br 0542h
0564 0560 005266 000002        		    inc 2(SP)
0564 0564 000747               		    br 0534h
0564 0566                      		//560     drawCursor();
0564 0566 004737 002754        		    jsr PC, @#1516
0564 056A 062706 000004        		    add #4, SP
0564 056E 000207               		    ret
0564 0570                      		leftNumber:
0564 0570 162706 000006        		    sub #6, SP
0564 0574                      		//524     unsigned i, b = bombsCnt;
0564 0574 013766 006242 000002 		    mov @#3234, 2(SP)
0564 057A                      		//526     for(i=256, a=playfield; i!=0; i--, a++)
0564 057A 012766 000400 000000 		    mov #256, 0(SP)
0564 0580 012766 006252 000004 		    mov #3242, 4(SP)
0564 0586 022766 000000 000000 		    cmp #0, 0(SP)
0564 058C 001422               		    beq 05B2h
0564 058E                      		//527     {
0564 058E 117600 000004        		    movb @4(SP), R0
0564 0592 142700 177600        		    bicb #65408, R0
0564 0596 122700 000001        		    cmpb #1, R0
0564 059A 001006               		    bne 05A8h
0564 059C                      		//529         {
0564 059C 022766 000000 000002 		    cmp #0, 2(SP)
0564 05A2 001407               		    beq 05B2h
0564 05A4                      		//531             b--;
0564 05A4 005366 000002        		    dec 2(SP)
0564 05A8 005366 000000        		    dec 0(SP)
0564 05AC 005266 000004        		    inc 4(SP)
0564 05B0 000752               		    br 0586h
0564 05B2                      		//534     drawNumber((void*)040510, b);
0564 05B2 016646 000002        		    mov 2(SP), -(SP)
0564 05B6 012746 040510        		    mov #16712, -(SP)
0564 05BA 004737 006062        		    jsr PC, @#3122
0564 05BE 062706 000004        		    add #4, SP
0564 05C2 062706 000006        		    add #6, SP
0564 05C6 000207               		    ret
0564 05C8                      		rightNumber:
0564 05C8                      		//539     drawNumber((void*)040573, time);
0564 05C8 013746 006246        		    mov @#3238, -(SP)
0564 05CC 012746 040573        		    mov #16763, -(SP)
0564 05D0 004737 006062        		    jsr PC, @#3122
0564 05D4 062706 000004        		    add #4, SP
0564 05D8 000207               		    ret
0564 05DA                      		hideCursor:
0564 05DA                      		//412     redrawCell012(cursorX, cursorY);
0564 05DA 013746 006236        		    mov @#3230, -(SP)
0564 05DE 013746 006234        		    mov @#3228, -(SP)
0564 05E2 004737 003710        		    jsr PC, @#1992
0564 05E6 062706 000004        		    add #4, SP
0564 05EA 000207               		    ret
0564 05EC                      		drawCursor:
0564 05EC                      		//417     drawa(calcCell2(cursorX, cursorY), bmpCursor, 2, 16);
0564 05EC 012746 000020        		    mov #16, -(SP)
0564 05F0 012746 000002        		    mov #2, -(SP)
0564 05F4 012746 011320        		    mov #4816, -(SP)
0564 05F8 013746 006236        		    mov @#3230, -(SP)
0564 05FC 013746 006234        		    mov @#3228, -(SP)
0564 0600 004737 005216        		    jsr PC, @#2702
0564 0604 062706 000004        		    add #4, SP
0564 0608 010001               		    mov R0, R1
0564 060A 012600               		    mov (SP)+, R0
0564 060C 012602               		    mov (SP)+, R2
0564 060E 012603               		    mov (SP)+, R3
0564 0610 004737 001166        		    jsr PC, @#630
0564 0614 000207               		    ret
0564 0616                      		putBombs:
0564 0616 162706 000010        		    sub #8, SP
0564 061A                      		//390     bombsPutted = 1;
0564 061A 012737 000001 006244 		    mov #1, @#3236
0564 0620                      		//391     bc = bombsCnt;
0564 0620 013766 006242 000004 		    mov @#3234, 4(SP)
0564 0626                      		//392     while(bc)
0564 0626 016600 000004        		    mov 4(SP), R0
0564 062A 005700               		    tst R0
0564 062C 001521               		    beq 06D0h
0564 062E                      		//393     {
0564 062E 004737 001234        		    jsr PC, @#668
0564 0632 042700 177400        		    bic #65280, R0
0564 0636 010066 000000        		    mov R0, 0(SP)
0564 063A                      		//394 	x = rand(); x = (x>>4) ^ (x&0xF);
0564 063A 016600 000000        		    mov 0(SP), R0
0564 063E 006000               		    ror R0
0564 0640 006000               		    ror R0
0564 0642 006000               		    ror R0
0564 0644 006000               		    ror R0
0564 0646 042700 170000        		    bic #61440, R0
0564 064A 016601 000000        		    mov 0(SP), R1
0564 064E 042701 177760        		    bic #65520, R1
0564 0652 074100               		    xor R1, R0
0564 0654 010066 000000        		    mov R0, 0(SP)
0564 0658                      		//395 	y = rand(); y = (y>>4) ^ (y&0xF);
0564 0658 004737 001234        		    jsr PC, @#668
0564 065C 042700 177400        		    bic #65280, R0
0564 0660 010066 000002        		    mov R0, 2(SP)
0564 0664                      		//395 	y = rand(); y = (y>>4) ^ (y&0xF);
0564 0664 016600 000002        		    mov 2(SP), R0
0564 0668 006000               		    ror R0
0564 066A 006000               		    ror R0
0564 066C 006000               		    ror R0
0564 066E 006000               		    ror R0
0564 0670 042700 170000        		    bic #61440, R0
0564 0674 016601 000002        		    mov 2(SP), R1
0564 0678 042701 177760        		    bic #65520, R1
0564 067C 074100               		    xor R1, R0
0564 067E 010066 000002        		    mov R0, 2(SP)
0564 0682                      		//396         if(x >= gameWidth || y >= gameHeight) continue;
0564 0682 023766 006222 000000 		    cmp @#3218, 0(SP)
0564 0688 101716               		    blos 0626h
0564 068A 023766 006224 000002 		    cmp @#3220, 2(SP)
0564 0690 101712               		    blos 0626h
0564 0692                      		//397         if(cursorX==x && cursorY==y) continue; // Бомба не должна быть под крсором
0564 0692 026637 000000 006234 		    cmp 0(SP), @#3228
0564 0698 001004               		    bne 06A2h
0564 069A 026637 000002 006236 		    cmp 2(SP), @#3230
0564 06A0 001702               		    beq 0626h
0564 06A2                      		//398         uint8_t* a = &playfield[x + (y<<4)];
0564 06A2 016600 000002        		    mov 2(SP), R0
0564 06A6 006300               		    asl R0
0564 06A8 006300               		    asl R0
0564 06AA 006300               		    asl R0
0564 06AC 006300               		    asl R0
0564 06AE 066600 000000        		    add 0(SP), R0
0564 06B2 062700 006252        		    add #3242, R0
0564 06B6 010066 000006        		    mov R0, 6(SP)
0564 06BA                      		//399         if(*a == 0x80) continue; // Бомба в этой клетке уже есть
0564 06BA 117600 000006        		    movb @6(SP), R0
0564 06BE 122700 000200        		    cmpb #128, R0
0564 06C2 001661               		    beq 0626h
0564 06C4                      		//400         *a = 0x80;
0564 06C4 112776 000200 000006 		    movb #128, @6(SP)
0564 06CA                      		//401         bc--;
0564 06CA 005366 000004        		    dec 4(SP)
0564 06CE 000653               		    br 0626h
0564 06D0 062706 000010        		    add #8, SP
0564 06D4 000207               		    ret
0564 06D6                      		open:
0564 06D6 162706 000002        		    sub #2, SP
0564 06DA                      		//467     hideCursor();
0564 06DA 004737 002732        		    jsr PC, @#1498
0564 06DE                      		//468     open_x = x;
0564 06DE 016637 000004 007002 		    mov 4(SP), @#3586
0564 06E4                      		//469     open_y = y;
0564 06E4 016637 000006 007004 		    mov 6(SP), @#3588
0564 06EA                      		//470     open_a = &playfield[x + (y << 4)];
0564 06EA 016600 000006        		    mov 6(SP), R0
0564 06EE 006300               		    asl R0
0564 06F0 006300               		    asl R0
0564 06F2 006300               		    asl R0
0564 06F4 006300               		    asl R0
0564 06F6 066600 000004        		    add 4(SP), R0
0564 06FA 062700 006252        		    add #3242, R0
0564 06FE 010037 007010        		    mov R0, @#3592
0564 0702                      		//471     open_int();
0564 0702 004737 005324        		    jsr PC, @#2772
0564 0706                      		//472     drawCursor();
0564 0706 004737 002754        		    jsr PC, @#1516
0564 070A                      		//473     if(gameOverFlag)
0564 070A 013700 006232        		    mov @#3226, R0
0564 070E 005700               		    tst R0
0564 0710 001411               		    beq 0724h
0564 0712                      		//474     {
0564 0712 012746 013440        		    mov #5920, -(SP)
0564 0716 004737 002416        		    jsr PC, @#1294
0564 071A 062706 000002        		    add #2, SP
0564 071E                      		//476         drawPlayField();
0564 071E 004737 002452        		    jsr PC, @#1322
0564 0722 000461               		    br 0786h
0564 0724                      		//479     {
0564 0724 012766 006252 000000 		    mov #3242, 0(SP)
0564 072A                      		//481         for(y=0; y<gameHeight; y++, a+=16, a-=gameWidth)
0564 072A 012766 000000 000006 		    mov #0, 6(SP)
0564 0730 023766 006224 000006 		    cmp @#3220, 6(SP)
0564 0736 101434               		    blos 0770h
0564 0738                      		//482             for(x=0; x<gameWidth; x++, a++)
0564 0738 012766 000000 000004 		    mov #0, 4(SP)
0564 073E 023766 006222 000004 		    cmp @#3218, 4(SP)
0564 0744 101413               		    blos 075Ch
0564 0746                      		//483                 if(*a == 0)
0564 0746 117600 000000        		    movb @0(SP), R0
0564 074A 122700 000000        		    cmpb #0, R0
0564 074E 001001               		    bne 0752h
0564 0750                      		//484                     return;
0564 0750 000432               		    br 0786h
0564 0752 005266 000004        		    inc 4(SP)
0564 0756 005266 000000        		    inc 0(SP)
0564 075A 000761               		    br 073Eh
0564 075C 005266 000006        		    inc 6(SP)
0564 0760 062766 000020 000000 		    add #16, 0(SP)
0564 0766 013700 006222        		    mov @#3218, R0
0564 076A 160066 000000        		    sub R0, 0(SP)
0564 076E 000740               		    br 0730h
0564 0770                      		//486         drawSmile(bmpWin);
0564 0770 012746 013660        		    mov #6064, -(SP)
0564 0774 004737 002416        		    jsr PC, @#1294
0564 0778 062706 000002        		    add #2, SP
0564 077C                      		//487         gameOverFlag = 1;
0564 077C 012737 000001 006232 		    mov #1, @#3226
0564 0782                      		//488         drawPlayField();
0564 0782 004737 002452        		    jsr PC, @#1322
0564 0786 062706 000002        		    add #2, SP
0564 078A 000207               		    ret
0564 078C                      		getBitmap:
0564 078C                      		//494     if((n & 0x80) != 0 && gameOverFlag) return bmpB;
0564 078C 116600 000002        		    movb 2(SP), R0
0564 0790 142700 177577        		    bicb #65407, R0
0564 0794 122700 000000        		    cmpb #0, R0
0564 0798 001407               		    beq 07A8h
0564 079A 013700 006232        		    mov @#3226, R0
0564 079E 005700               		    tst R0
0564 07A0 001403               		    beq 07A8h
0564 07A2                      		//494     if((n & 0x80) != 0 && gameOverFlag) return bmpB;
0564 07A2 012700 013120        		    mov #5712, R0
0564 07A6 000207               		    ret
0564 07A8                      		//495     return (((uint16_t)(n & 0x7F))<<6) + bmpUn;
0564 07A8 116600 000002        		    movb 2(SP), R0
0564 07AC 142700 177600        		    bicb #65408, R0
0564 07B0 004737 001060        		    jsr PC, @#560
0564 07B4 006300               		    asl R0
0564 07B6 006300               		    asl R0
0564 07B8 006300               		    asl R0
0564 07BA 006300               		    asl R0
0564 07BC 006300               		    asl R0
0564 07BE 006300               		    asl R0
0564 07C0 062700 011520        		    add #4944, R0
0564 07C4 000207               		    ret
0564 07C6 000207               		    ret
0564 07C8                      		redrawCell012:
0564 07C8                      		//500     draw(calcCell2(x,y), getBitmap(playfield[x + (y<<4)]), 1, 16);
0564 07C8 012746 000020        		    mov #16, -(SP)
0564 07CC 012746 000001        		    mov #1, -(SP)
0564 07D0 016600 000010        		    mov 8(SP), R0
0564 07D4 006300               		    asl R0
0564 07D6 006300               		    asl R0
0564 07D8 006300               		    asl R0
0564 07DA 006300               		    asl R0
0564 07DC 066600 000006        		    add 6(SP), R0
0564 07E0 062700 006252        		    add #3242, R0
0564 07E4 111046               		    movb (R0), -(SP)
0564 07E6 004737 003614        		    jsr PC, @#1932
0564 07EA 062706 000002        		    add #2, SP
0564 07EE 010046               		    mov R0, -(SP)
0564 07F0 016646 000012        		    mov 10(SP), -(SP)
0564 07F4 016646 000012        		    mov 10(SP), -(SP)
0564 07F8 004737 005216        		    jsr PC, @#2702
0564 07FC 062706 000004        		    add #4, SP
0564 0800 010001               		    mov R0, R1
0564 0802 012600               		    mov (SP)+, R0
0564 0804 012602               		    mov (SP)+, R2
0564 0806 012603               		    mov (SP)+, R3
0564 0808 004737 001144        		    jsr PC, @#612
0564 080C 000207               		    ret
0564 080E                      		puttext2:
0564 080E 162706 000002        		    sub #2, SP
0564 0812                      		//211     do
0564 0812                      		//212     {
0564 0812 016600 000004        		    mov 4(SP), R0
0564 0816 005266 000004        		    inc 4(SP)
0564 081A 111000               		    movb (R0), R0
0564 081C 110066 000000        		    movb R0, 0(SP)
0564 0820                      		//214         gotoxy(x, (uint8_t)*a++);
0564 0820 016600 000004        		    mov 4(SP), R0
0564 0824 005266 000004        		    inc 4(SP)
0564 0828 111000               		    movb (R0), R0
0564 082A 042700 177400        		    bic #65280, R0
0564 082E 010046               		    mov R0, -(SP)
0564 0830 116600 000002        		    movb 2(SP), R0
0564 0834 042700 177400        		    bic #65280, R0
0564 0838 010001               		    mov R0, R1
0564 083A 012602               		    mov (SP)+, R2
0564 083C 104024               		    emt 20.
0564 083E                      		//215         a = puttext(a,0);
0564 083E 012746 000000        		    mov #0, -(SP)
0564 0842 016601 000006        		    mov 6(SP), R1
0564 0846 012602               		    mov (SP)+, R2
0564 0848 104020               		    emt 16.
0564 084A 010100               		    mov R1, R0
0564 084C 010066 000004        		    mov R0, 4(SP)
0564 0850                      		//217     while(*a);
0564 0850 117600 000004        		    movb @4(SP), R0
0564 0854 005700               		    tst R0
0564 0856 001335               		    bne 0812h
0564 0858 062706 000002        		    add #2, SP
0564 085C 000207               		    ret
0564 085E                      		getc2:
0564 085E                      		//222     if((*(uint8_t*)0177660 & 128) == 0) return 0; // Нажата ли клавиша
0564 085E 113700 177660        		    movb @#65456, R0
0564 0862 142700 177577        		    bicb #65407, R0
0564 0866 122700 000000        		    cmpb #0, R0
0564 086A 001003               		    bne 0872h
0564 086C                      		//222     if((*(uint8_t*)0177660 & 128) == 0) return 0; // Нажата ли клавиша
0564 086C 012700 000000        		    mov #0, R0
0564 0870 000207               		    ret
0564 0872                      		//223     return (*(uint8_t*)0177660 & 128) ? *(uint8_t*)0177662 : 0;
0564 0872 113700 177660        		    movb @#65456, R0
0564 0876 142700 177577        		    bicb #65407, R0
0564 087A 005700               		    tst R0
0564 087C 001403               		    beq 0884h
0564 087E 113700 177662        		    movb @#65458, R0
0564 0882 000402               		    br 0888h
0564 0884 012700 000000        		    mov #0, R0
0564 0888 000207               		    ret
0564 088A 000207               		    ret
0564 088C                      		main:
0564 088C 162706 000002        		    sub #2, SP
0564 0890                      		//229     aa = aa >> 1;
0564 0890 116600 000000        		    movb 0(SP), R0
0564 0894 000241               		    clc
0564 0896 106000               		    rorb R0
0564 0898 110066 000000        		    movb R0, 0(SP)
0564 089C                      		//230     aa = aa >> 2;
0564 089C 116600 000000        		    movb 0(SP), R0
0564 08A0 106000               		    rorb R0
0564 08A2 106000               		    rorb R0
0564 08A4 142700 177700        		    bicb #65472, R0
0564 08A8 110066 000000        		    movb R0, 0(SP)
0564 08AC                      		//231     aa = aa >> 3;
0564 08AC 116600 000000        		    movb 0(SP), R0
0564 08B0 106000               		    rorb R0
0564 08B2 106000               		    rorb R0
0564 08B4 106000               		    rorb R0
0564 08B6 142700 177740        		    bicb #65504, R0
0564 08BA 110066 000000        		    movb R0, 0(SP)
0564 08BE                      		//232     aa = aa >> 4;
0564 08BE 116600 000000        		    movb 0(SP), R0
0564 08C2 106000               		    rorb R0
0564 08C4 106000               		    rorb R0
0564 08C6 106000               		    rorb R0
0564 08C8 106000               		    rorb R0
0564 08CA 142700 177760        		    bicb #65520, R0
0564 08CE 110066 000000        		    movb R0, 0(SP)
0564 08D2                      		//233     aa = aa >> 5;
0564 08D2 116600 000000        		    movb 0(SP), R0
0564 08D6 106100               		    rolb R0
0564 08D8 106100               		    rolb R0
0564 08DA 106100               		    rolb R0
0564 08DC 106100               		    rolb R0
0564 08DE 142700 177770        		    bicb #65528, R0
0564 08E2 110066 000000        		    movb R0, 0(SP)
0564 08E6                      		//234     aa = aa >> 6;
0564 08E6 116600 000000        		    movb 0(SP), R0
0564 08EA 106100               		    rolb R0
0564 08EC 106100               		    rolb R0
0564 08EE 106100               		    rolb R0
0564 08F0 142700 177774        		    bicb #65532, R0
0564 08F4 110066 000000        		    movb R0, 0(SP)
0564 08F8                      		//235     aa = aa >> 7;
0564 08F8 116600 000000        		    movb 0(SP), R0
0564 08FC 106100               		    rolb R0
0564 08FE 106100               		    rolb R0
0564 0900 142700 177776        		    bicb #65534, R0
0564 0904 110066 000000        		    movb R0, 0(SP)
0564 0908                      		//236     aa = aa >> 8;
0564 0908 116600 000000        		    movb 0(SP), R0
0564 090C 005000               		    clr R0
0564 090E 110066 000000        		    movb R0, 0(SP)
0564 0912                      		//237     aa = aa << 1;
0564 0912 116600 000000        		    movb 0(SP), R0
0564 0916 106300               		    aslb R0
0564 0918 110066 000000        		    movb R0, 0(SP)
0564 091C                      		//238     aa = aa << 2;
0564 091C 116600 000000        		    movb 0(SP), R0
0564 0920 106300               		    aslb R0
0564 0922 106300               		    aslb R0
0564 0924 110066 000000        		    movb R0, 0(SP)
0564 0928                      		//239     aa = aa << 3;
0564 0928 116600 000000        		    movb 0(SP), R0
0564 092C 106300               		    aslb R0
0564 092E 106300               		    aslb R0
0564 0930 106300               		    aslb R0
0564 0932 110066 000000        		    movb R0, 0(SP)
0564 0936                      		//240     aa = aa << 4;
0564 0936 116600 000000        		    movb 0(SP), R0
0564 093A 106300               		    aslb R0
0564 093C 106300               		    aslb R0
0564 093E 106300               		    aslb R0
0564 0940 106300               		    aslb R0
0564 0942 110066 000000        		    movb R0, 0(SP)
0564 0946                      		//241     aa = aa << 5;
0564 0946 116600 000000        		    movb 0(SP), R0
0564 094A 106300               		    aslb R0
0564 094C 106300               		    aslb R0
0564 094E 106300               		    aslb R0
0564 0950 106300               		    aslb R0
0564 0952 106300               		    aslb R0
0564 0954 110066 000000        		    movb R0, 0(SP)
0564 0958                      		//242     aa = aa << 6;
0564 0958 116600 000000        		    movb 0(SP), R0
0564 095C 106000               		    rorb R0
0564 095E 106000               		    rorb R0
0564 0960 106000               		    rorb R0
0564 0962 142700 140077        		    bicb #49215, R0
0564 0966 110066 000000        		    movb R0, 0(SP)
0564 096A                      		//243     aa = aa << 7;
0564 096A 116600 000000        		    movb 0(SP), R0
0564 096E 106000               		    rorb R0
0564 0970 106000               		    rorb R0
0564 0972 142700 100177        		    bicb #32895, R0
0564 0976 110066 000000        		    movb R0, 0(SP)
0564 097A                      		//244     aa = aa << 8;
0564 097A 116600 000000        		    movb 0(SP), R0
0564 097E 005000               		    clr R0
0564 0980 110066 000000        		    movb R0, 0(SP)
0564 0984                      		//246     if((displaystatus() & 1) == 0) putc(0233); // Включение режима 256x256
0564 0984 104034               		    emt 28.
0564 0986 042700 177776        		    bic #65534, R0
0564 098A 022700 000000        		    cmp #0, R0
0564 098E 001003               		    bne 0996h
0564 0990                      		//246     if((displaystatus() & 1) == 0) putc(0233); // Включение режима 256x256
0564 0990 112700 000233        		    movb #155, R0
0564 0994 104016               		    emt 14.
0564 0996                      		//247     putc(0x9A); // Выключение курсора
0564 0996 112700 000232        		    movb #154, R0
0564 099A 104016               		    emt 14.
0564 099C                      		//248     *(uint16_t*)0177706 = 731; // Запуск таймера
0564 099C 012737 001333 177706 		    mov #731, @#65478
0564 09A2                      		//249     *(uint16_t*)0177712 = 0160; // Запуск таймера
0564 09A2 012737 000160 177712 		    mov #112, @#65482
0564 09A8                      		//250     *(uint16_t*)0177660 = 64; // Выключаем прерывание клавиатуры
0564 09A8 012737 000100 177660 		    mov #64, @#65456
0564 09AE                      		//252     gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486;
0564 09AE 012737 000015 006222 		    mov #13, @#3218
0564 09B4                      		//252     gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486;
0564 09B4 012737 000012 006224 		    mov #10, @#3220
0564 09BA                      		//252     gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486;
0564 09BA 012737 000024 006242 		    mov #20, @#3234
0564 09C0                      		//252     gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486;
0564 09C0 012737 050006 006240 		    mov #20486, @#3232
0564 09C6                      		//253     startGame();
0564 09C6 004737 001302        		    jsr PC, @#706
0564 09CA                      		//255     for(;;)
0564 09CA                      		//256     {
0564 09CA 004737 001210        		    jsr PC, @#648
0564 09CE                      		//258         draw((void*)045020, bmpLogo, 8, 32);
0564 09CE 012746 000040        		    mov #32, -(SP)
0564 09D2 012746 000010        		    mov #8, -(SP)
0564 09D6 012746 007060        		    mov #3632, -(SP)
0564 09DA 012701 045020        		    mov #18960, R1
0564 09DE 012600               		    mov (SP)+, R0
0564 09E0 012602               		    mov (SP)+, R2
0564 09E2 012603               		    mov (SP)+, R3
0564 09E4 004737 001144        		    jsr PC, @#612
0564 09E8                      		//259         puttext2(txtMenu);
0564 09E8 012746 006652        		    mov #3498, -(SP)
0564 09EC 004737 004016        		    jsr PC, @#2062
0564 09F0 062706 000002        		    add #2, SP
0564 09F4                      		//260         for(;;)
0564 09F4                      		//261         {
0564 09F4 004737 001234        		    jsr PC, @#668
0564 09F8                      		//263             switch(getc2())
0564 09F8 004737 004136        		    jsr PC, @#2142
0564 09FC 004737 001042        		    jsr PC, @#546
0564 0A00 005024               		    clr (R4)+
0564 0A02 000060               		    
0564 0A04 005056               		    clr @-(SP)
0564 0A06 000061               		    
0564 0A08 005110               		    com (R0)
0564 0A0A 000062               		    
0564 0A0C 005142               		    com -(R2)
0564 0A0E 000063               		    
0564 0A10 000000               		    halt
0564 0A12 005174 012737        		    com @5599(R4)
0564 0A16 000011               		    
0564 0A18 006222               		    asr (R2)+
0564 0A1A                      		//265                 case '0': gameWidth=9;  gameHeight=9;  bombsCnt=3;  playfieldVA=21006; break;
0564 0A1A 012737 000011 006224 		    mov #9, @#3220
0564 0A20                      		//265                 case '0': gameWidth=9;  gameHeight=9;  bombsCnt=3;  playfieldVA=21006; break;
0564 0A20 012737 000003 006242 		    mov #3, @#3234
0564 0A26                      		//265                 case '0': gameWidth=9;  gameHeight=9;  bombsCnt=3;  playfieldVA=21006; break;
0564 0A26 012737 051016 006240 		    mov #21006, @#3232
0564 0A2C                      		//265                 case '0': gameWidth=9;  gameHeight=9;  bombsCnt=3;  playfieldVA=21006; break;
0564 0A2C 000450               		    br 0A7Eh
0564 0A2E                      		//266                 case '1': gameWidth=9;  gameHeight=9;  bombsCnt=10; playfieldVA=21006; break;
0564 0A2E                      		//266                 case '1': gameWidth=9;  gameHeight=9;  bombsCnt=10; playfieldVA=21006; break;
0564 0A2E 012737 000011 006222 		    mov #9, @#3218
0564 0A34                      		//266                 case '1': gameWidth=9;  gameHeight=9;  bombsCnt=10; playfieldVA=21006; break;
0564 0A34 012737 000011 006224 		    mov #9, @#3220
0564 0A3A                      		//266                 case '1': gameWidth=9;  gameHeight=9;  bombsCnt=10; playfieldVA=21006; break;
0564 0A3A 012737 000012 006242 		    mov #10, @#3234
0564 0A40                      		//266                 case '1': gameWidth=9;  gameHeight=9;  bombsCnt=10; playfieldVA=21006; break;
0564 0A40 012737 051016 006240 		    mov #21006, @#3232
0564 0A46                      		//266                 case '1': gameWidth=9;  gameHeight=9;  bombsCnt=10; playfieldVA=21006; break;
0564 0A46 000433               		    br 0A7Eh
0564 0A48                      		//267                 case '2': gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486; break;
0564 0A48                      		//267                 case '2': gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486; break;
0564 0A48 012737 000015 006222 		    mov #13, @#3218
0564 0A4E                      		//267                 case '2': gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486; break;
0564 0A4E 012737 000012 006224 		    mov #10, @#3220
0564 0A54                      		//267                 case '2': gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486; break;
0564 0A54 012737 000024 006242 		    mov #20, @#3234
0564 0A5A                      		//267                 case '2': gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486; break;
0564 0A5A 012737 050006 006240 		    mov #20486, @#3232
0564 0A60                      		//267                 case '2': gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486; break;
0564 0A60 000416               		    br 0A7Eh
0564 0A62                      		//268                 case '3': gameWidth=16; gameHeight=14; bombsCnt=43; playfieldVA=18432; break;
0564 0A62                      		//268                 case '3': gameWidth=16; gameHeight=14; bombsCnt=43; playfieldVA=18432; break;
0564 0A62 012737 000020 006222 		    mov #16, @#3218
0564 0A68                      		//268                 case '3': gameWidth=16; gameHeight=14; bombsCnt=43; playfieldVA=18432; break;
0564 0A68 012737 000016 006224 		    mov #14, @#3220
0564 0A6E                      		//268                 case '3': gameWidth=16; gameHeight=14; bombsCnt=43; playfieldVA=18432; break;
0564 0A6E 012737 000053 006242 		    mov #43, @#3234
0564 0A74                      		//268                 case '3': gameWidth=16; gameHeight=14; bombsCnt=43; playfieldVA=18432; break;
0564 0A74 012737 044000 006240 		    mov #18432, @#3232
0564 0A7A                      		//268                 case '3': gameWidth=16; gameHeight=14; bombsCnt=43; playfieldVA=18432; break;
0564 0A7A 000401               		    br 0A7Eh
0564 0A7C                      		//269                 default: continue;
0564 0A7C                      		//269                 default: continue;
0564 0A7C 000673               		    br 09F4h
0564 0A7E                      		//271             break;
0564 0A7E 000401               		    br 0A82h
0564 0A80 000671               		    br 09F4h
0564 0A82                      		//274         startGame();
0564 0A82 004737 001302        		    jsr PC, @#706
0564 0A86 000641               		    br 09CAh
0564 0A88 062706 000002        		    add #2, SP
0564 0A8C 000207               		    ret
0564 0A8E                      		calcCell2:
0564 0A8E                      		//407     return (y<<10) + (x<<2) + playfieldVA;
0564 0A8E 016600 000004        		    mov 4(SP), R0
0564 0A92 000300               		    swab R0
0564 0A94 105000               		    clrb R0
0564 0A96 006300               		    asl R0
0564 0A98 006300               		    asl R0
0564 0A9A 016601 000002        		    mov 2(SP), R1
0564 0A9E 006301               		    asl R1
0564 0AA0 006301               		    asl R1
0564 0AA2 060100               		    add R1, R0
0564 0AA4 063700 006240        		    add @#3232, R0
0564 0AA8 000207               		    ret
0564 0AAA 000207               		    ret
0564 0AAC                      		open_check:
0564 0AAC                      		//425     if(open_x < gameWidth && open_y < gameHeight && (*open_a & 0x80) != 0) open_n++;
0564 0AAC 023737 006222 007002 		    cmp @#3218, @#3586
0564 0AB2 101417               		    blos 0AD2h
0564 0AB4 023737 006224 007004 		    cmp @#3220, @#3588
0564 0ABA 101413               		    blos 0AD2h
0564 0ABC 012700 007010        		    mov #3592, R0
0564 0AC0 117000 000000        		    movb @0(R0), R0
0564 0AC4 142700 177577        		    bicb #65407, R0
0564 0AC8 122700 000000        		    cmpb #0, R0
0564 0ACC 001402               		    beq 0AD2h
0564 0ACE                      		//425     if(open_x < gameWidth && open_y < gameHeight && (*open_a & 0x80) != 0) open_n++;
0564 0ACE 005237 007006        		    inc @#3590
0564 0AD2 000207               		    ret
0564 0AD4                      		open_int:
0564 0AD4                      		//430     if(open_x >= gameWidth || open_y >= gameHeight) return;
0564 0AD4 023737 006222 007002 		    cmp @#3218, @#3586
0564 0ADA 101404               		    blos 0AE4h
0564 0ADC 023737 006224 007004 		    cmp @#3220, @#3588
0564 0AE2 101001               		    bhi 0AE6h
0564 0AE4                      		//430     if(open_x >= gameWidth || open_y >= gameHeight) return;
0564 0AE4 000207               		    ret
0564 0AE6                      		//431     if(*open_a & 0x80)
0564 0AE6 012700 007010        		    mov #3592, R0
0564 0AEA 117000 000000        		    movb @0(R0), R0
0564 0AEE 142700 177577        		    bicb #65407, R0
0564 0AF2 005700               		    tst R0
0564 0AF4 001404               		    beq 0AFEh
0564 0AF6                      		//432     {
0564 0AF6 012737 000001 006232 		    mov #1, @#3226
0564 0AFC                      		//434         return;
0564 0AFC 000207               		    ret
0564 0AFE                      		//436     if(*open_a != 0) return;
0564 0AFE 012700 007010        		    mov #3592, R0
0564 0B02 117000 000000        		    movb @0(R0), R0
0564 0B06 122700 000000        		    cmpb #0, R0
0564 0B0A 001401               		    beq 0B0Eh
0564 0B0C                      		//436     if(*open_a != 0) return;
0564 0B0C 000207               		    ret
0564 0B0E                      		//437     open_n = 3;
0564 0B0E 012737 000003 007006 		    mov #3, @#3590
0564 0B14                      		//438     open_x--; open_y--; open_a -= 17;
0564 0B14 005337 007002        		    dec @#3586
0564 0B18                      		//438     open_x--; open_y--; open_a -= 17;
0564 0B18 005337 007004        		    dec @#3588
0564 0B1C                      		//438     open_x--; open_y--; open_a -= 17;
0564 0B1C 162737 000021 007010 		    sub #17, @#3592
0564 0B22                      		//439     open_check(); open_x++;  open_a++;
0564 0B22 004737 005254        		    jsr PC, @#2732
0564 0B26                      		//439     open_check(); open_x++;  open_a++;
0564 0B26 005237 007002        		    inc @#3586
0564 0B2A                      		//439     open_check(); open_x++;  open_a++;
0564 0B2A 005237 007010        		    inc @#3592
0564 0B2E                      		//440     open_check(); open_x++;  open_a++;
0564 0B2E 004737 005254        		    jsr PC, @#2732
0564 0B32                      		//440     open_check(); open_x++;  open_a++;
0564 0B32 005237 007002        		    inc @#3586
0564 0B36                      		//440     open_check(); open_x++;  open_a++;
0564 0B36 005237 007010        		    inc @#3592
0564 0B3A                      		//441     open_check(); open_y++;  open_a+=16;
0564 0B3A 004737 005254        		    jsr PC, @#2732
0564 0B3E                      		//441     open_check(); open_y++;  open_a+=16;
0564 0B3E 005237 007004        		    inc @#3588
0564 0B42                      		//441     open_check(); open_y++;  open_a+=16;
0564 0B42 062737 000020 007010 		    add #16, @#3592
0564 0B48                      		//442     open_check(); open_x-=2; open_a-=2;
0564 0B48 004737 005254        		    jsr PC, @#2732
0564 0B4C                      		//442     open_check(); open_x-=2; open_a-=2;
0564 0B4C 162737 000002 007002 		    sub #2, @#3586
0564 0B52                      		//442     open_check(); open_x-=2; open_a-=2;
0564 0B52 162737 000002 007010 		    sub #2, @#3592
0564 0B58                      		//443     open_check(); open_y++;  open_a+=16;
0564 0B58 004737 005254        		    jsr PC, @#2732
0564 0B5C                      		//443     open_check(); open_y++;  open_a+=16;
0564 0B5C 005237 007004        		    inc @#3588
0564 0B60                      		//443     open_check(); open_y++;  open_a+=16;
0564 0B60 062737 000020 007010 		    add #16, @#3592
0564 0B66                      		//444     open_check(); open_x++;  open_a++;
0564 0B66 004737 005254        		    jsr PC, @#2732
0564 0B6A                      		//444     open_check(); open_x++;  open_a++;
0564 0B6A 005237 007002        		    inc @#3586
0564 0B6E                      		//444     open_check(); open_x++;  open_a++;
0564 0B6E 005237 007010        		    inc @#3592
0564 0B72                      		//445     open_check(); open_x++;  open_a++;
0564 0B72 004737 005254        		    jsr PC, @#2732
0564 0B76                      		//445     open_check(); open_x++;  open_a++;
0564 0B76 005237 007002        		    inc @#3586
0564 0B7A                      		//445     open_check(); open_x++;  open_a++;
0564 0B7A 005237 007010        		    inc @#3592
0564 0B7E                      		//446     open_check();
0564 0B7E 004737 005254        		    jsr PC, @#2732
0564 0B82                      		//447     open_x--; open_y--; open_a -= 17;
0564 0B82 005337 007002        		    dec @#3586
0564 0B86                      		//447     open_x--; open_y--; open_a -= 17;
0564 0B86 005337 007004        		    dec @#3588
0564 0B8A                      		//447     open_x--; open_y--; open_a -= 17;
0564 0B8A 162737 000021 007010 		    sub #17, @#3592
0564 0B90                      		//448     *open_a = open_n;
0564 0B90 012700 007010        		    mov #3592, R0
0564 0B94 013701 007006        		    mov @#3590, R1
0564 0B98 110170 000000        		    movb R1, @0(R0)
0564 0B9C                      		//449     if(open_n == 3)
0564 0B9C 022737 000003 007006 		    cmp #3, @#3590
0564 0BA2 001076               		    bne 0C20h
0564 0BA4                      		//450     {
0564 0BA4 005337 007002        		    dec @#3586
0564 0BA8                      		//451         open_x--; open_y--;  open_a-=17;
0564 0BA8 005337 007004        		    dec @#3588
0564 0BAC                      		//451         open_x--; open_y--;  open_a-=17;
0564 0BAC 162737 000021 007010 		    sub #17, @#3592
0564 0BB2                      		//452         open_int();  open_x++;  open_a++;
0564 0BB2 004737 005324        		    jsr PC, @#2772
0564 0BB6                      		//452         open_int();  open_x++;  open_a++;
0564 0BB6 005237 007002        		    inc @#3586
0564 0BBA                      		//452         open_int();  open_x++;  open_a++;
0564 0BBA 005237 007010        		    inc @#3592
0564 0BBE                      		//453         open_int();  open_x++;  open_a++;
0564 0BBE 004737 005324        		    jsr PC, @#2772
0564 0BC2                      		//453         open_int();  open_x++;  open_a++;
0564 0BC2 005237 007002        		    inc @#3586
0564 0BC6                      		//453         open_int();  open_x++;  open_a++;
0564 0BC6 005237 007010        		    inc @#3592
0564 0BCA                      		//454         open_int();  open_y++;  open_a+=16;
0564 0BCA 004737 005324        		    jsr PC, @#2772
0564 0BCE                      		//454         open_int();  open_y++;  open_a+=16;
0564 0BCE 005237 007004        		    inc @#3588
0564 0BD2                      		//454         open_int();  open_y++;  open_a+=16;
0564 0BD2 062737 000020 007010 		    add #16, @#3592
0564 0BD8                      		//455         open_int();  open_x-=2; open_a-=2;
0564 0BD8 004737 005324        		    jsr PC, @#2772
0564 0BDC                      		//455         open_int();  open_x-=2; open_a-=2;
0564 0BDC 162737 000002 007002 		    sub #2, @#3586
0564 0BE2                      		//455         open_int();  open_x-=2; open_a-=2;
0564 0BE2 162737 000002 007010 		    sub #2, @#3592
0564 0BE8                      		//456         open_int();  open_y++;  open_a+=16;
0564 0BE8 004737 005324        		    jsr PC, @#2772
0564 0BEC                      		//456         open_int();  open_y++;  open_a+=16;
0564 0BEC 005237 007004        		    inc @#3588
0564 0BF0                      		//456         open_int();  open_y++;  open_a+=16;
0564 0BF0 062737 000020 007010 		    add #16, @#3592
0564 0BF6                      		//457         open_int();  open_x++;  open_a++;
0564 0BF6 004737 005324        		    jsr PC, @#2772
0564 0BFA                      		//457         open_int();  open_x++;  open_a++;
0564 0BFA 005237 007002        		    inc @#3586
0564 0BFE                      		//457         open_int();  open_x++;  open_a++;
0564 0BFE 005237 007010        		    inc @#3592
0564 0C02                      		//458         open_int();  open_x++;  open_a++;
0564 0C02 004737 005324        		    jsr PC, @#2772
0564 0C06                      		//458         open_int();  open_x++;  open_a++;
0564 0C06 005237 007002        		    inc @#3586
0564 0C0A                      		//458         open_int();  open_x++;  open_a++;
0564 0C0A 005237 007010        		    inc @#3592
0564 0C0E                      		//459         open_int();
0564 0C0E 004737 005324        		    jsr PC, @#2772
0564 0C12                      		//460         open_x--;  open_y--; open_a -= 17;
0564 0C12 005337 007002        		    dec @#3586
0564 0C16                      		//460         open_x--;  open_y--; open_a -= 17;
0564 0C16 005337 007004        		    dec @#3588
0564 0C1A                      		//460         open_x--;  open_y--; open_a -= 17;
0564 0C1A 162737 000021 007010 		    sub #17, @#3592
0564 0C20                      		//462     redrawCell012(open_x, open_y);
0564 0C20 013746 007004        		    mov @#3588, -(SP)
0564 0C24 013746 007002        		    mov @#3586, -(SP)
0564 0C28 004737 003710        		    jsr PC, @#1992
0564 0C2C 062706 000004        		    add #4, SP
0564 0C30 000207               		    ret
0564 0C32                      		drawNumber:
0564 0C32 162706 000002        		    sub #2, SP
0564 0C36                      		//513     uint8_t c=3;
0564 0C36 112766 000003 000000 		    movb #3, 0(SP)
0564 0C3C                      		//514     do
0564 0C3C                      		//515     {
0564 0C3C 016600 000006        		    mov 6(SP), R0
0564 0C40 012701 000012        		    mov #10, R1
0564 0C44 004737 001076        		    jsr PC, @#574
0564 0C48 010066 000006        		    mov R0, 6(SP)
0564 0C4C                      		//517         drawb(d, bmpN0 + (mod_div << 6), 3, 21);
0564 0C4C 012746 000025        		    mov #21, -(SP)
0564 0C50 012746 000003        		    mov #3, -(SP)
0564 0C54 013700 001122        		    mov @#594, R0
0564 0C58 006300               		    asl R0
0564 0C5A 006300               		    asl R0
0564 0C5C 006300               		    asl R0
0564 0C5E 006300               		    asl R0
0564 0C60 006300               		    asl R0
0564 0C62 006300               		    asl R0
0564 0C64 062700 014100        		    add #6208, R0
0564 0C68 010046               		    mov R0, -(SP)
0564 0C6A 016601 000012        		    mov 10(SP), R1
0564 0C6E 012600               		    mov (SP)+, R0
0564 0C70 012602               		    mov (SP)+, R2
0564 0C72 012603               		    mov (SP)+, R3
0564 0C74 004737 001124        		    jsr PC, @#596
0564 0C78                      		//518         d -= 3;
0564 0C78 162766 000003 000004 		    sub #3, 4(SP)
0564 0C7E                      		//519     } while(--c);
0564 0C7E 012700 000000        		    mov #0, R0
0564 0C82 060600               		    add SP, R0
0564 0C84 105310               		    decb (R0)
0564 0C86 111000               		    movb (R0), R0
0564 0C88 005700               		    tst R0
0564 0C8A 001330               		    bne 0C3Ch
0564 0C8C 062706 000002        		    add #2, SP
0564 0C90 000207               		    ret
0567 0E0B                      		drawTransImage:
0568 0E0B 012702 000020        		    MOV     #16, R2
0569 0E0F 042011               		drawTransImag1:	BIC     (R0)+, (R1)
0570 0E11 052021               		    BIS     (R0)+, (R1)+
0571 0E13 042011               		    BIC     (R0)+, (R1)
0572 0E15 052021               		    BIS     (R0)+, (R1)+
0573 0E17 062701 000074        		    ADD     #60, R1
0574 0E1B 077207               		    SOB	    R2, drawTransImag1
0575 0E1D 000207               		    RTS     PC
0579 0E1F                      		drawImage:
0580 0E1F 012702 000020        		    MOV     #16, R2
0581 0E23                      		drawImage1:
0582 0E23 012021               		    MOV     (R0)+, (R1)+
0583 0E25 012021               		    MOV     (R0)+, (R1)+
0584 0E27 062701 000074        		    ADD     #60, R1
0585 0E2B 077205               		    SOB	R2, drawImage1
0586 0E2D 000207               		    RTS	PC
0590 0E2F                      		.include "resources.inc"
0001 0E2F                      		align 2
0002 0E30 000000 012000 000000 		bmpLogo:   	insert_bitmap2 "resources/logo.bmp",  128, 37
0004 12D0 000000 000000 000000 		bmpCursor:  	insert_bitmap2t "resources/cursor.bmp",  16, 16
0006 1350 177777 037777 177777 		bmpUn:   	insert_bitmap2 "resources/un.bmp", 16, 16
0007 1390 177777 037777 177777 		bmpF:    	insert_bitmap2 "resources/f.bmp",  16, 16
0008 13D0 177777 037777 177777 		bmpQ:    	insert_bitmap2 "resources/q.bmp",  16, 16
0009 1410 052525 052525 000001 		bmp0:    	insert_bitmap2 "resources/0.bmp",  16, 16
0010 1450 052525 052525 000001 		bmp1:    	insert_bitmap2 "resources/1.bmp",  16, 16
0011 1490 052525 052525 000001 		bmp2:    	insert_bitmap2 "resources/2.bmp",  16, 16
0012 14D0 052525 052525 000001 		bmp3:    	insert_bitmap2 "resources/3.bmp",  16, 16
0013 1510 052525 052525 000001 		bmp4:    	insert_bitmap2 "resources/4.bmp",  16, 16
0014 1550 052525 052525 000001 		bmp5:    	insert_bitmap2 "resources/5.bmp",  16, 16
0015 1590 052525 052525 000001 		bmp6:    	insert_bitmap2 "resources/6.bmp",  16, 16
0016 15D0 052525 052525 000001 		bmp7:    	insert_bitmap2 "resources/7.bmp",  16, 16
0017 1610 052525 052525 000001 		bmp8:    	insert_bitmap2 "resources/8.bmp",  16, 16
0018 1650 052525 052525 000001 		bmpB:    	insert_bitmap2 "resources/b.bmp",  16, 16
0021 1690 177777 177777 037777 		bmpGood: 	insert_bitmap2 "resources/good.bmp", 24, 24
0022 1720 177777 177777 037777 		bmpBad:  	insert_bitmap2 "resources/bad.bmp", 24, 24
0023 17B0 177777 177777 037777 		bmpWin:  	insert_bitmap2 "resources/win.bmp", 24, 24
0025 1840 177774 171417 031777 		bmpN0:   	insert_bitmap2 "resources/n0.bmp", 12, 21
0026 1880 010420 040401 030104 		bmpN1:   	insert_bitmap2 "resources/n1.bmp", 12, 21
0027 18C0 177774 170417 031777 		bmpN2:   	insert_bitmap2 "resources/n2.bmp", 12, 21
0028 1900 177774 170417 031777 		bmpN3:   	insert_bitmap2 "resources/n3.bmp", 12, 21
0029 1940 010420 041401 030104 		bmpN4:   	insert_bitmap2 "resources/n4.bmp", 12, 21
0030 1980 177774 171417 011777 		bmpN5:   	insert_bitmap2 "resources/n5.bmp", 12, 21
0031 19C0 177774 171417 011777 		bmpN6:   	insert_bitmap2 "resources/n6.bmp", 12, 21
0032 1A00 177774 170417 031777 		bmpN7:   	insert_bitmap2 "resources/n7.bmp", 12, 21
0033 1A40 177774 171417 031777 		bmpN8:   	insert_bitmap2 "resources/n8.bmp", 12, 21
0034 1A80 177774 171417 031777 		bmpN9:   	insert_bitmap2 "resources/n9.bmp", 12, 21
0036 1AC0 042104 042100 010421 		bmpBlock:   	insert_bitmap2 "resources/block.bmp", 16, 16                       
0592 1B00                      		endOfROM:              
0596 1B00 