0004 0000                      		CONVERT1251TOKOI8R
0005 0000                      		DECIMALNUMBERS
0006 0000                      		ORG 01000
0010 0200                      		EntryPoint:
0011 0200 012706 037776        		    MOV #3FFEh, SP
0012 0204 012707 004202        		    MOV #main, PC
0016 0208                      		SHLW:
0017 0208 042701 177760        		    BIC #0FFF0h, R1
0018 020C 001402               		    BEQ SHLW1
0019 020E                      		SHLW2:
0020 020E 060000               		    ADD R0, R0
0021 0210 077102               		    SOB R1, SHLW2
0022 0212                      		SHLW1:
0023 0212 000207               		    RTS PC
0027 0214                      		SHRW:
0028 0214 042701 177760        		    BIC #0FFF0h, R1
0029 0218 001403               		    BEQ SHRW1
0030 021A                      		SHRW2:
0031 021A 000241               		    CLC
0032 021C 006000               		    ROR R0
0033 021E 077103               		    SOB R1, SHRW2
0034 0220                      		SHRW1:
0035 0220 000207               		    RTS PC
0039 0222                      		__SWITCH:
0040 0222 012601               		    MOV (SP)+, R1
0041 0224                      		__SWITCH0:
0042 0224 012105               		    MOV (R1)+, R5
0043 0226 001403               		    BEQ __SWITCH1
0044 0228 020021               		    CMP R0, (R1)+
0045 022A 001374               		    BNE __SWITCH0
0046 022C 010507               		    MOV R5, PC
0047 022E                      		__SWITCH1:
0048 022E 012107               		    MOV (R1)+, PC
0052 0230                      		SGNB0:
0053 0230 042700 177400        		    BIC #0xFF00, R0
0054 0234 105700               		    TSTB R0
0055 0236 100002               		    BPL SGNB0R
0056 0238 052700 177400        		    BIS #0xFF00, R0
0057 023C                      		SGNB0R:
0058 023C 000207               		    RTS PC
0064 023E                      		DIVWU:
0065 023E 005005               		    CLR R5
0066 0240                      		DIVWU1:
0067 0240 160100               		    SUB R1, R0
0068 0242 103402               		    BCS DIVWU2
0069 0244 005205               		    INC R5
0070 0246 000774               		    BR DIVWU1
0071 0248                      		DIVWU2:
0072 0248 060100               		    ADD R1, R0
0073 024A 010067 000004        		    MOV R0, MOD_DIV
0074 024E 010500               		    MOV R5, R0
0075 0250 000207               		    RTS PC
0077 0252 000000               		MOD_DIV: DW 0
0082 0254                      		drawb:
0083 0254 010104               		    MOV R1, R4
0084 0256 010205               		    MOV R2, R5
0085 0258                      		drawb1:
0086 0258 112024               		    MOVB (R0)+,(R4)+
0087 025A 077502               		    SOB R5, drawb1
0088 025C 062701 000100        		    ADD #64., R1
0089 0260 077307               		    SOB R3, drawb
0090 0262 000207               		    RTS PC
0095 0264                      		draw:
0096 0264 010104               		    MOV R1, R4
0097 0266 010205               		    MOV R2, R5
0098 0268                      		draw1:
0099 0268 012024               		    MOV (R0)+,(R4)+
0100 026A 012024               		    MOV (R0)+,(R4)+
0101 026C 077503               		    SOB R5, draw1
0102 026E 062701 000100        		    ADD #64., R1
0103 0272 077310               		    SOB R3, draw
0104 0274 000207               		    RTS PC
0109 0276                      		drawa:
0110 0276 010104               		    MOV R1, R4
0111 0278 010205               		    MOV R2, R5
0112 027A                      		drawa1:
0113 027A 042014               		    BIC (R0)+,(R4)
0114 027C 052024               		    BIS (R0)+,(R4)+
0115 027E 077503               		    SOB R5, drawa1
0116 0280 062701 000100        		    ADD #64., R1
0117 0284 077310               		    SOB R3, drawa
0118 0286 000207               		    RTS PC
0122 0288                      		CLEARSCREEN:
0123 0288 012700 040000        		    MOV #4000h, R0
0124 028C 012701 004000        		    MOV #800h, R1
0125 0290                      		CLEARSCREEN1:
0126 0290 005020               		    CLR (R0)+
0127 0292 005020               		    CLR (R0)+
0128 0294 005020               		    CLR (R0)+
0129 0296 005020               		    CLR (R0)+
0130 0298 077105               		    SOB R1, CLEARSCREEN1
0131 029A 000207               		    RTS PC
0546 029C                      		rand:
0546 029C                      		//489     rand_state = (uint8_t)(rand_state << (uint8_t)2) + rand_state + (uint8_t)1;
0546 029C 113700 006436        		    movb @#3358, R0
0546 02A0 060000               		    add R0, R0
0546 02A2 060000               		    add R0, R0
0546 02A4 042700 177400        		    bic #65280, R0
0546 02A8 113701 006436        		    movb @#3358, R1
0546 02AC 042701 177400        		    bic #65280, R1
0546 02B0 060100               		    add R1, R0
0546 02B2 062700 000001        		    add #1, R0
0546 02B6 110037 006436        		    movb R0, @#3358
0546 02BA                      		//490     return rand_state;
0546 02BA 113700 006436        		    movb @#3358, R0
0546 02BE 000207               		    ret
0546 02C0 000207               		    ret
0546 02C2                      		startGame:
0546 02C2 162706 000006        		    sub #6, SP
0546 02C6                      		//262     gameWidth1 = gameWidth-1;
0546 02C6 013700 005646        		    mov @#2982, R0
0546 02CA 162700 000001        		    sub #1, R0
0546 02CE 010037 005652        		    mov R0, @#2986
0546 02D2                      		//263     gameHeight1 = gameHeight-1;
0546 02D2 013700 005650        		    mov @#2984, R0
0546 02D6 162700 000001        		    sub #1, R0
0546 02DA 010037 005654        		    mov R0, @#2988
0546 02DE                      		//266     {   clearScreen();
0546 02DE 004737 001210        		    jsr PC, @#648
0546 02E2                      		//268         uint8_t* a = (uint8_t*)(040000 + 64*16*2);
0546 02E2 012766 044000 000004 		    mov #18432, 4(SP)
0546 02E8                      		//269         for(y=0; y<14; y++, a+=64*15)
0546 02E8 005066 000002        		    clr 2(SP)
0546 02EC 022766 000016 000002 		    cmp #14, 2(SP)
0546 02F2 101437               		    blos 0332h
0546 02F4                      		//270             for(x=0; x<16; x++, a+=4)
0546 02F4 005066 000000        		    clr 0(SP)
0546 02F8 022766 000020 000000 		    cmp #16, 0(SP)
0546 02FE 101423               		    blos 0326h
0546 0300                      		//271                 draw(a, bmpBlock, 1, 16);
0546 0300 012746 000020        		    mov #16, -(SP)
0546 0304 012746 000001        		    mov #1, -(SP)
0546 0308 012746 014724        		    mov #6612, -(SP)
0546 030C 016601 000012        		    mov 10(SP), R1
0546 0310 012600               		    mov (SP)+, R0
0546 0312 012602               		    mov (SP)+, R2
0546 0314 012603               		    mov (SP)+, R3
0546 0316 004737 001144        		    jsr PC, @#612
0546 031A 005266 000000        		    inc 0(SP)
0546 031E 062766 000004 000004 		    add #4, 4(SP)
0546 0324 000751               		    br 02F8h
0546 0326 005266 000002        		    inc 2(SP)
0546 032A 062766 001700 000004 		    add #960, 4(SP)
0546 0330 000735               		    br 02ECh
0546 0332                      		//275     cursorX = gameWidth >> 1;
0546 0332 013700 005646        		    mov @#2982, R0
0546 0336 000241               		    clc
0546 0338 006000               		    ror R0
0546 033A 010037 005660        		    mov R0, @#2992
0546 033E                      		//276     cursorY = gameHeight >> 1;
0546 033E 013700 005650        		    mov @#2984, R0
0546 0342 000241               		    clc
0546 0344 006000               		    ror R0
0546 0346 010037 005662        		    mov R0, @#2994
0546 034A                      		//277     bombsPutted = 0;
0546 034A 005037 005670        		    clr @#3000
0546 034E                      		//278     gameOverFlag = 0;
0546 034E 005037 005656        		    clr @#2990
0546 0352                      		//279     time = 0;
0546 0352 005037 005672        		    clr @#3002
0546 0356                      		//282     {   unsigned i = 0;
0546 0356 005066 000000        		    clr 0(SP)
0546 035A                      		//283         do
0546 035A                      		//284         {
0546 035A 016600 000000        		    mov 0(SP), R0
0546 035E 062700 005676        		    add #3006, R0
0546 0362 105010               		    clrb (R0)
0546 0364                      		//286             i++;
0546 0364 005266 000000        		    inc 0(SP)
0546 0368                      		//287         } while(i != 256);
0546 0368 022766 000400 000000 		    cmp #256, 0(SP)
0546 036E 001365               		    bne 035Ah
0546 0370                      		//291     drawSmile(bmpGood);
0546 0370 012746 012644        		    mov #5540, -(SP)
0546 0374 004737 002400        		    jsr PC, @#1280
0546 0378 062706 000002        		    add #2, SP
0546 037C                      		//294     drawPlayField();
0546 037C 004737 002434        		    jsr PC, @#1308
0546 0380                      		//297     leftNumber();
0546 0380 004737 002536        		    jsr PC, @#1374
0546 0384                      		//298     rightNumber();
0546 0384 004737 002666        		    jsr PC, @#1462
0546 0388                      		//300     for(;;)
0546 0388                      		//301     {
0546 0388 004737 001234        		    jsr PC, @#668
0546 038C                      		//304         if(!gameOverFlag && time!=999)
0546 038C 013700 005656        		    mov @#2990, R0
0546 0390 005700               		    tst R0
0546 0392 001033               		    bne 03CAh
0546 0394 022737 001747 005672 		    cmp #999, @#3002
0546 039A 001427               		    beq 03CAh
0546 039C                      		//305         {
0546 039C 022737 000555 177710 		    cmp #365, @#65480
0546 03A2 103403               		    blo 03AAh
0546 03A4 012700 000001        		    mov #1, R0
0546 03A8 000401               		    br 03ACh
0546 03AA 005000               		    clr R0
0546 03AC 110066 000000        		    movb R0, 0(SP)
0546 03B0                      		//307             if(t != lastTimer)
0546 03B0 116600 000000        		    movb 0(SP), R0
0546 03B4 113701 005674        		    movb @#3004, R1
0546 03B8 120100               		    cmpb R1, R0
0546 03BA 001407               		    beq 03CAh
0546 03BC                      		//308             {
0546 03BC 116637 000000 005674 		    movb 0(SP), @#3004
0546 03C2                      		//310     		time++;
0546 03C2 005237 005672        		    inc @#3002
0546 03C6                      		//311                 rightNumber();
0546 03C6 004737 002666        		    jsr PC, @#1462
0546 03CA                      		//316         switch(getc2())
0546 03CA 004737 004124        		    jsr PC, @#2132
0546 03CE 004737 001042        		    jsr PC, @#546
0546 03D2 001756               		    beq 03B0h
0546 03D4 000000               		    halt
0546 03D6 001762               		    beq 03BCh
0546 03D8 000010               		    
0546 03DA 002014               		    bge 03F4h
0546 03DC 000031               		    
0546 03DE 002050               		    bge 0430h
0546 03E0 000032               		    
0546 03E2 002076               		    bge 0460h
0546 03E4 000033               		    
0546 03E6 002132               		    bge 049Ch
0546 03E8 000040               		    
0546 03EA 000000               		    halt
0546 03EC 002204               		    bge 02F6h
0546 03EE                      		//318             case 0:
0546 03EE                      		//319                 break;
0546 03EE 012707 002366        		    mov #1270, PC
0546 03F2                      		//320             case 8:
0546 03F2                      		//321                 if(cursorX==0) continue;
0546 03F2 022737 000000 005660 		    cmp #0, @#2992
0546 03F8 001707               		    beq 0388h
0546 03FA                      		//322                 hideCursor();
0546 03FA 004737 002710        		    jsr PC, @#1480
0546 03FE                      		//323                 cursorX--;
0546 03FE 005337 005660        		    dec @#2992
0546 0402                      		//324                 drawCursor();
0546 0402 004737 002732        		    jsr PC, @#1498
0546 0406                      		//325                 continue;
0546 0406 000700               		    br 0388h
0546 0408                      		//326                 break;
0546 0408 012707 002366        		    mov #1270, PC
0546 040C                      		//327             case 0x19:
0546 040C                      		//328                 if(cursorX+1 == gameWidth) continue;
0546 040C 013700 005660        		    mov @#2992, R0
0546 0410 062700 000001        		    add #1, R0
0546 0414 023700 005646        		    cmp @#2982, R0
0546 0418 001667               		    beq 0388h
0546 041A                      		//329                 hideCursor();
0546 041A 004737 002710        		    jsr PC, @#1480
0546 041E                      		//330                 cursorX++;
0546 041E 005237 005660        		    inc @#2992
0546 0422                      		//331                 drawCursor();
0546 0422 004737 002732        		    jsr PC, @#1498
0546 0426                      		//332                 break;
0546 0426 000547               		    br 04F6h
0546 0428                      		//333             case 0x1A:
0546 0428                      		//334                 if(cursorY == 0) continue;
0546 0428 022737 000000 005662 		    cmp #0, @#2994
0546 042E 001654               		    beq 0388h
0546 0430                      		//335                 hideCursor();
0546 0430 004737 002710        		    jsr PC, @#1480
0546 0434                      		//336                 cursorY--;
0546 0434 005337 005662        		    dec @#2994
0546 0438                      		//337                 drawCursor();
0546 0438 004737 002732        		    jsr PC, @#1498
0546 043C                      		//338                 break;
0546 043C 000534               		    br 04F6h
0546 043E                      		//339             case 0x1B:
0546 043E                      		//340                 if(cursorY+1 == gameHeight) continue;
0546 043E 013700 005662        		    mov @#2994, R0
0546 0442 062700 000001        		    add #1, R0
0546 0446 023700 005650        		    cmp @#2984, R0
0546 044A 001636               		    beq 0388h
0546 044C                      		//341                 hideCursor();
0546 044C 004737 002710        		    jsr PC, @#1480
0546 0450                      		//342                 cursorY++;
0546 0450 005237 005662        		    inc @#2994
0546 0454                      		//343                 drawCursor();
0546 0454 004737 002732        		    jsr PC, @#1498
0546 0458                      		//344                 break;
0546 0458 000516               		    br 04F6h
0546 045A                      		//345             case ' ':
0546 045A                      		//346                 if(gameOverFlag) return;
0546 045A 013700 005656        		    mov @#2990, R0
0546 045E 005700               		    tst R0
0546 0460 001401               		    beq 0464h
0546 0462                      		//346                 if(gameOverFlag) return;
0546 0462 000513               		    br 04FAh
0546 0464                      		//347                 if(!bombsPutted) putBombs();
0546 0464 013700 005670        		    mov @#3000, R0
0546 0468 005700               		    tst R0
0546 046A 001002               		    bne 0470h
0546 046C                      		//347                 if(!bombsPutted) putBombs();
0546 046C 004737 003004        		    jsr PC, @#1540
0546 0470                      		//348             	open(cursorX, cursorY);
0546 0470 013746 005662        		    mov @#2994, -(SP)
0546 0474 013746 005660        		    mov @#2992, -(SP)
0546 0478 004737 003320        		    jsr PC, @#1744
0546 047C 062706 000004        		    add #4, SP
0546 0480                      		//349                 continue;
0546 0480 012707 001610        		    mov #904, PC
0546 0484                      		//350             default:
0546 0484                      		//351                 if(gameOverFlag) return;
0546 0484 013700 005656        		    mov @#2990, R0
0546 0488 005700               		    tst R0
0546 048A 001401               		    beq 048Eh
0546 048C                      		//351                 if(gameOverFlag) return;
0546 048C 000466               		    br 04FAh
0546 048E                      		//352                 uint8_t* a = &playfield[(cursorY << 4) + cursorX];
0546 048E 013700 005662        		    mov @#2994, R0
0546 0492 060000               		    add R0, R0
0546 0494 060000               		    add R0, R0
0546 0496 060000               		    add R0, R0
0546 0498 060000               		    add R0, R0
0546 049A 063700 005660        		    add @#2992, R0
0546 049E 062700 005676        		    add #3006, R0
0546 04A2 010066 000000        		    mov R0, 0(SP)
0546 04A6                      		//353                 uint8_t v = *a;
0546 04A6 117666 000000 000002 		    movb @0(SP), 2(SP)
0546 04AC                      		//354                 if((v & 0x7F) > 2) continue;
0546 04AC 116600 000002        		    movb 2(SP), R0
0546 04B0 142700 177600        		    bicb #65408, R0
0546 04B4 122700 000002        		    cmpb #2, R0
0546 04B8 002002               		    bge 04BEh
0546 04BA 012707 001610        		    mov #904, PC
0546 04BE                      		//355                 v++;
0546 04BE 105266 000002        		    incb 2(SP)
0546 04C2                      		//356                 if((v & 0x7F) == 3) v = v - 3;
0546 04C2 116600 000002        		    movb 2(SP), R0
0546 04C6 142700 177600        		    bicb #65408, R0
0546 04CA 122700 000003        		    cmpb #3, R0
0546 04CE 001010               		    bne 04E0h
0546 04D0                      		//356                 if((v & 0x7F) == 3) v = v - 3;
0546 04D0 116600 000002        		    movb 2(SP), R0
0546 04D4 042700 177400        		    bic #65280, R0
0546 04D8 162700 000003        		    sub #3, R0
0546 04DC 110066 000002        		    movb R0, 2(SP)
0546 04E0                      		//357                 *a = v;
0546 04E0 116676 000002 000000 		    movb 2(SP), @0(SP)
0546 04E6                      		//358                 hideCursor();
0546 04E6 004737 002710        		    jsr PC, @#1480
0546 04EA                      		//359             	drawCursor();
0546 04EA 004737 002732        		    jsr PC, @#1498
0546 04EE                      		//360                 leftNumber();
0546 04EE 004737 002536        		    jsr PC, @#1374
0546 04F2                      		//361                 continue;
0546 04F2 012707 001610        		    mov #904, PC
0546 04F6 012707 001610        		    mov #904, PC
0546 04FA 062706 000006        		    add #6, SP
0546 04FE 000207               		    ret
0546 0500                      		drawSmile:
0546 0500                      		//529     drawb((void*)040435, img, 6, 24);
0546 0500 012746 000030        		    mov #24, -(SP)
0546 0504 012746 000006        		    mov #6, -(SP)
0546 0508 016646 000006        		    mov 6(SP), -(SP)
0546 050C 012701 040435        		    mov #16669, R1
0546 0510 012600               		    mov (SP)+, R0
0546 0512 012602               		    mov (SP)+, R2
0546 0514 012603               		    mov (SP)+, R3
0546 0516 004737 001124        		    jsr PC, @#596
0546 051A 000207               		    ret
0546 051C                      		drawPlayField:
0546 051C 162706 000004        		    sub #4, SP
0546 0520                      		//539     for(y=0; y<gameHeight; y++)
0546 0520 005066 000002        		    clr 2(SP)
0546 0524 023766 005650 000002 		    cmp @#2984, 2(SP)
0546 052A 101424               		    blos 0554h
0546 052C                      		//540         for(x=0; x<gameWidth; x++)
0546 052C 005066 000000        		    clr 0(SP)
0546 0530 023766 005646 000000 		    cmp @#2982, 0(SP)
0546 0536 101413               		    blos 054Eh
0546 0538                      		//541            redrawCell012(x,y);
0546 0538 016646 000002        		    mov 2(SP), -(SP)
0546 053C 016646 000002        		    mov 2(SP), -(SP)
0546 0540 004737 003676        		    jsr PC, @#1982
0546 0544 062706 000004        		    add #4, SP
0546 0548 005266 000000        		    inc 0(SP)
0546 054C 000761               		    br 0530h
0546 054E 005266 000002        		    inc 2(SP)
0546 0552 000750               		    br 0524h
0546 0554                      		//542     drawCursor();
0546 0554 004737 002732        		    jsr PC, @#1498
0546 0558 062706 000004        		    add #4, SP
0546 055C 000207               		    ret
0546 055E                      		leftNumber:
0546 055E 162706 000006        		    sub #6, SP
0546 0562                      		//506     unsigned i, b = bombsCnt;
0546 0562 013766 005666 000002 		    mov @#2998, 2(SP)
0546 0568                      		//508     for(i=256, a=playfield; i!=0; i--, a++)
0546 0568 012766 000400 000000 		    mov #256, 0(SP)
0546 056E 012766 005676 000004 		    mov #3006, 4(SP)
0546 0574 022766 000000 000000 		    cmp #0, 0(SP)
0546 057A 001422               		    beq 05A0h
0546 057C                      		//509     {
0546 057C 117600 000004        		    movb @4(SP), R0
0546 0580 142700 177600        		    bicb #65408, R0
0546 0584 122700 000001        		    cmpb #1, R0
0546 0588 001006               		    bne 0596h
0546 058A                      		//511         {
0546 058A 022766 000000 000002 		    cmp #0, 2(SP)
0546 0590 001407               		    beq 05A0h
0546 0592                      		//513             b--;
0546 0592 005366 000002        		    dec 2(SP)
0546 0596 005366 000000        		    dec 0(SP)
0546 059A 005266 000004        		    inc 4(SP)
0546 059E 000752               		    br 0574h
0546 05A0                      		//516     drawNumber((void*)040510, b);
0546 05A0 016646 000002        		    mov 2(SP), -(SP)
0546 05A4 012746 040510        		    mov #16712, -(SP)
0546 05A8 004737 005476        		    jsr PC, @#2878
0546 05AC 062706 000004        		    add #4, SP
0546 05B0 062706 000006        		    add #6, SP
0546 05B4 000207               		    ret
0546 05B6                      		rightNumber:
0546 05B6                      		//521     drawNumber((void*)040573, time);
0546 05B6 013746 005672        		    mov @#3002, -(SP)
0546 05BA 012746 040573        		    mov #16763, -(SP)
0546 05BE 004737 005476        		    jsr PC, @#2878
0546 05C2 062706 000004        		    add #4, SP
0546 05C6 000207               		    ret
0546 05C8                      		hideCursor:
0546 05C8                      		//394     redrawCell012(cursorX, cursorY);
0546 05C8 013746 005662        		    mov @#2994, -(SP)
0546 05CC 013746 005660        		    mov @#2992, -(SP)
0546 05D0 004737 003676        		    jsr PC, @#1982
0546 05D4 062706 000004        		    add #4, SP
0546 05D8 000207               		    ret
0546 05DA                      		drawCursor:
0546 05DA                      		//399     drawa(calcCell2(cursorX, cursorY), bmpCursor, 2, 16);
0546 05DA 012746 000020        		    mov #16, -(SP)
0546 05DE 012746 000002        		    mov #2, -(SP)
0546 05E2 012746 010744        		    mov #4580, -(SP)
0546 05E6 013746 005662        		    mov @#2994, -(SP)
0546 05EA 013746 005660        		    mov @#2992, -(SP)
0546 05EE 004737 004610        		    jsr PC, @#2440
0546 05F2 062706 000004        		    add #4, SP
0546 05F6 010001               		    mov R0, R1
0546 05F8 012600               		    mov (SP)+, R0
0546 05FA 012602               		    mov (SP)+, R2
0546 05FC 012603               		    mov (SP)+, R3
0546 05FE 004737 001166        		    jsr PC, @#630
0546 0602 000207               		    ret
0546 0604                      		putBombs:
0546 0604 162706 000010        		    sub #8, SP
0546 0608                      		//372     bombsPutted = 1;
0546 0608 012737 000001 005670 		    mov #1, @#3000
0546 060E                      		//373     bc = bombsCnt;
0546 060E 013766 005666 000004 		    mov @#2998, 4(SP)
0546 0614                      		//374     while(bc)
0546 0614 016600 000004        		    mov 4(SP), R0
0546 0618 005700               		    tst R0
0546 061A 001527               		    beq 06CAh
0546 061C                      		//375     {
0546 061C 004737 001234        		    jsr PC, @#668
0546 0620 042700 177400        		    bic #65280, R0
0546 0624 010066 000000        		    mov R0, 0(SP)
0546 0628                      		//376 	x = rand(); x = (x>>4) ^ (x&0xF);
0546 0628 016600 000000        		    mov 0(SP), R0
0546 062C 006000               		    ror R0
0546 062E 006000               		    ror R0
0546 0630 006000               		    ror R0
0546 0632 006000               		    ror R0
0546 0634 042700 170000        		    bic #61440, R0
0546 0638 010046               		    mov R0, -(SP)
0546 063A 016600 000002        		    mov 2(SP), R0
0546 063E 042700 177760        		    bic #65520, R0
0546 0642 010001               		    mov R0, R1
0546 0644 012600               		    mov (SP)+, R0
0546 0646 074100               		    xor R1, R0
0546 0648 010066 000000        		    mov R0, 0(SP)
0546 064C                      		//377 	y = rand(); y = (y>>4) ^ (y&0xF);
0546 064C 004737 001234        		    jsr PC, @#668
0546 0650 042700 177400        		    bic #65280, R0
0546 0654 010066 000002        		    mov R0, 2(SP)
0546 0658                      		//377 	y = rand(); y = (y>>4) ^ (y&0xF);
0546 0658 016600 000002        		    mov 2(SP), R0
0546 065C 006000               		    ror R0
0546 065E 006000               		    ror R0
0546 0660 006000               		    ror R0
0546 0662 006000               		    ror R0
0546 0664 042700 170000        		    bic #61440, R0
0546 0668 010046               		    mov R0, -(SP)
0546 066A 016600 000004        		    mov 4(SP), R0
0546 066E 042700 177760        		    bic #65520, R0
0546 0672 010001               		    mov R0, R1
0546 0674 012600               		    mov (SP)+, R0
0546 0676 074100               		    xor R1, R0
0546 0678 010066 000002        		    mov R0, 2(SP)
0546 067C                      		//378         if(x >= gameWidth || y >= gameHeight) continue;
0546 067C 023766 005646 000000 		    cmp @#2982, 0(SP)
0546 0682 101710               		    blos 0614h
0546 0684 023766 005650 000002 		    cmp @#2984, 2(SP)
0546 068A 101704               		    blos 0614h
0546 068C                      		//379         if(cursorX==x && cursorY==y) continue; // Бомба не должна быть под крсором
0546 068C 026637 000000 005660 		    cmp 0(SP), @#2992
0546 0692 001004               		    bne 069Ch
0546 0694 026637 000002 005662 		    cmp 2(SP), @#2994
0546 069A 001674               		    beq 0614h
0546 069C                      		//380         uint8_t* a = &playfield[(y<<4) + x];
0546 069C 016600 000002        		    mov 2(SP), R0
0546 06A0 060000               		    add R0, R0
0546 06A2 060000               		    add R0, R0
0546 06A4 060000               		    add R0, R0
0546 06A6 060000               		    add R0, R0
0546 06A8 066600 000000        		    add 0(SP), R0
0546 06AC 062700 005676        		    add #3006, R0
0546 06B0 010066 000006        		    mov R0, 6(SP)
0546 06B4                      		//381         if(*a == 0x80) continue; // Бомба в этой клетке уже есть
0546 06B4 117600 000006        		    movb @6(SP), R0
0546 06B8 122700 000200        		    cmpb #128, R0
0546 06BC 001653               		    beq 0614h
0546 06BE                      		//382         *a = 0x80;
0546 06BE 112776 000200 000006 		    movb #128, @6(SP)
0546 06C4                      		//383         bc--;
0546 06C4 005366 000004        		    dec 4(SP)
0546 06C8 000645               		    br 0614h
0546 06CA 062706 000010        		    add #8, SP
0546 06CE 000207               		    ret
0546 06D0                      		open:
0546 06D0 162706 000002        		    sub #2, SP
0546 06D4                      		//449     hideCursor();
0546 06D4 004737 002710        		    jsr PC, @#1480
0546 06D8                      		//450     open_x = x;
0546 06D8 016637 000004 006426 		    mov 4(SP), @#3350
0546 06DE                      		//451     open_y = y;
0546 06DE 016637 000006 006430 		    mov 6(SP), @#3352
0546 06E4                      		//452     open_a = &playfield[(y << 4) + x];
0546 06E4 016600 000006        		    mov 6(SP), R0
0546 06E8 060000               		    add R0, R0
0546 06EA 060000               		    add R0, R0
0546 06EC 060000               		    add R0, R0
0546 06EE 060000               		    add R0, R0
0546 06F0 066600 000004        		    add 4(SP), R0
0546 06F4 062700 005676        		    add #3006, R0
0546 06F8 010037 006434        		    mov R0, @#3356
0546 06FC                      		//453     open_int();
0546 06FC 004737 004740        		    jsr PC, @#2528
0546 0700                      		//454     drawCursor();
0546 0700 004737 002732        		    jsr PC, @#1498
0546 0704                      		//455     if(gameOverFlag)
0546 0704 013700 005656        		    mov @#2990, R0
0546 0708 005700               		    tst R0
0546 070A 001411               		    beq 071Eh
0546 070C                      		//456     {
0546 070C 012746 013064        		    mov #5684, -(SP)
0546 0710 004737 002400        		    jsr PC, @#1280
0546 0714 062706 000002        		    add #2, SP
0546 0718                      		//458         drawPlayField();
0546 0718 004737 002434        		    jsr PC, @#1308
0546 071C 000457               		    br 077Ch
0546 071E                      		//461     {
0546 071E 012766 005676 000000 		    mov #3006, 0(SP)
0546 0724                      		//463         for(y=0; y<gameHeight; y++, a+=16, a-=gameWidth)
0546 0724 005066 000006        		    clr 6(SP)
0546 0728 023766 005650 000006 		    cmp @#2984, 6(SP)
0546 072E 101433               		    blos 0766h
0546 0730                      		//464             for(x=0; x<gameWidth; x++, a++)
0546 0730 005066 000004        		    clr 4(SP)
0546 0734 023766 005646 000004 		    cmp @#2982, 4(SP)
0546 073A 101413               		    blos 0752h
0546 073C                      		//465                 if(*a == 0)
0546 073C 117600 000000        		    movb @0(SP), R0
0546 0740 122700 000000        		    cmpb #0, R0
0546 0744 001001               		    bne 0748h
0546 0746                      		//466                     return;
0546 0746 000432               		    br 077Ch
0546 0748 005266 000004        		    inc 4(SP)
0546 074C 005266 000000        		    inc 0(SP)
0546 0750 000761               		    br 0734h
0546 0752 005266 000006        		    inc 6(SP)
0546 0756 062766 000020 000000 		    add #16, 0(SP)
0546 075C 013700 005646        		    mov @#2982, R0
0546 0760 160066 000000        		    sub R0, 0(SP)
0546 0764 000741               		    br 0728h
0546 0766                      		//468         drawSmile(bmpWin);
0546 0766 012746 013304        		    mov #5828, -(SP)
0546 076A 004737 002400        		    jsr PC, @#1280
0546 076E 062706 000002        		    add #2, SP
0546 0772                      		//469         gameOverFlag = 1;
0546 0772 012737 000001 005656 		    mov #1, @#2990
0546 0778                      		//470         drawPlayField();
0546 0778 004737 002434        		    jsr PC, @#1308
0546 077C 062706 000002        		    add #2, SP
0546 0780 000207               		    ret
0546 0782                      		getBitmap:
0546 0782                      		//476     if((n & 0x80) != 0 && gameOverFlag) return bmpB;
0546 0782 116600 000002        		    movb 2(SP), R0
0546 0786 142700 177577        		    bicb #65407, R0
0546 078A 122700 000000        		    cmpb #0, R0
0546 078E 001407               		    beq 079Eh
0546 0790 013700 005656        		    mov @#2990, R0
0546 0794 005700               		    tst R0
0546 0796 001403               		    beq 079Eh
0546 0798                      		//476     if((n & 0x80) != 0 && gameOverFlag) return bmpB;
0546 0798 012700 012544        		    mov #5476, R0
0546 079C 000207               		    ret
0546 079E                      		//477     return (((uint16_t)(n & 0x7F))<<6) + bmpUn;
0546 079E 116600 000002        		    movb 2(SP), R0
0546 07A2 142700 177600        		    bicb #65408, R0
0546 07A6 004737 001060        		    jsr PC, @#560
0546 07AA 060000               		    add R0, R0
0546 07AC 060000               		    add R0, R0
0546 07AE 060000               		    add R0, R0
0546 07B0 060000               		    add R0, R0
0546 07B2 060000               		    add R0, R0
0546 07B4 060000               		    add R0, R0
0546 07B6 062700 011144        		    add #4708, R0
0546 07BA 000207               		    ret
0546 07BC 000207               		    ret
0546 07BE                      		redrawCell012:
0546 07BE                      		//482     draw(calcCell2(x,y), getBitmap(playfield[(y<<4)+x]), 1, 16);
0546 07BE 012746 000020        		    mov #16, -(SP)
0546 07C2 012746 000001        		    mov #1, -(SP)
0546 07C6 016600 000010        		    mov 8(SP), R0
0546 07CA 060000               		    add R0, R0
0546 07CC 060000               		    add R0, R0
0546 07CE 060000               		    add R0, R0
0546 07D0 060000               		    add R0, R0
0546 07D2 066600 000006        		    add 6(SP), R0
0546 07D6 062700 005676        		    add #3006, R0
0546 07DA 111046               		    movb (R0), -(SP)
0546 07DC 004737 003602        		    jsr PC, @#1922
0546 07E0 062706 000002        		    add #2, SP
0546 07E4 010046               		    mov R0, -(SP)
0546 07E6 016646 000012        		    mov 10(SP), -(SP)
0546 07EA 016646 000012        		    mov 10(SP), -(SP)
0546 07EE 004737 004610        		    jsr PC, @#2440
0546 07F2 062706 000004        		    add #4, SP
0546 07F6 010001               		    mov R0, R1
0546 07F8 012600               		    mov (SP)+, R0
0546 07FA 012602               		    mov (SP)+, R2
0546 07FC 012603               		    mov (SP)+, R3
0546 07FE 004737 001144        		    jsr PC, @#612
0546 0802 000207               		    ret
0546 0804                      		puttext2:
0546 0804 162706 000002        		    sub #2, SP
0546 0808                      		//211     do
0546 0808                      		//212     {
0546 0808 016600 000004        		    mov 4(SP), R0
0546 080C 005266 000004        		    inc 4(SP)
0546 0810 111000               		    movb (R0), R0
0546 0812 110066 000000        		    movb R0, 0(SP)
0546 0816                      		//214         gotoxy(x, (uint8_t)*a++);
0546 0816 016600 000004        		    mov 4(SP), R0
0546 081A 005266 000004        		    inc 4(SP)
0546 081E 111000               		    movb (R0), R0
0546 0820 042700 177400        		    bic #65280, R0
0546 0824 010046               		    mov R0, -(SP)
0546 0826 116600 000002        		    movb 2(SP), R0
0546 082A 042700 177400        		    bic #65280, R0
0546 082E 010001               		    mov R0, R1
0546 0830 012602               		    mov (SP)+, R2
0546 0832 104024               		    emt 20.
0546 0834                      		//215         a = puttext(a,0);
0546 0834 012746 000000        		    mov #0, -(SP)
0546 0838 016601 000006        		    mov 6(SP), R1
0546 083C 012602               		    mov (SP)+, R2
0546 083E 104020               		    emt 16.
0546 0840 010100               		    mov R1, R0
0546 0842 010066 000004        		    mov R0, 4(SP)
0546 0846                      		//217     while(*a);
0546 0846 117600 000004        		    movb @4(SP), R0
0546 084A 005700               		    tst R0
0546 084C 001335               		    bne 0808h
0546 084E 062706 000002        		    add #2, SP
0546 0852 000207               		    ret
0546 0854                      		getc2:
0546 0854                      		//222     if((*(uint8_t*)0177660 & 128) == 0) return 0; // Нажата ли клавиша
0546 0854 113700 177660        		    movb @#65456, R0
0546 0858 142700 177577        		    bicb #65407, R0
0546 085C 122700 000000        		    cmpb #0, R0
0546 0860 001003               		    bne 0868h
0546 0862                      		//222     if((*(uint8_t*)0177660 & 128) == 0) return 0; // Нажата ли клавиша
0546 0862 012700 000000        		    mov #0, R0
0546 0866 000207               		    ret
0546 0868                      		//223     return (*(uint8_t*)0177660 & 128) ? *(uint8_t*)0177662 : 0;
0546 0868 113700 177660        		    movb @#65456, R0
0546 086C 142700 177577        		    bicb #65407, R0
0546 0870 005700               		    tst R0
0546 0872 001403               		    beq 087Ah
0546 0874 113700 177662        		    movb @#65458, R0
0546 0878 000402               		    br 087Eh
0546 087A 012700 000000        		    mov #0, R0
0546 087E 000207               		    ret
0546 0880 000207               		    ret
0546 0882                      		main:
0546 0882                      		//228     if((displaystatus() & 1) == 0) putc(0233); // Включение режима 256x256
0546 0882 104034               		    emt 28.
0546 0884 042700 177776        		    bic #65534, R0
0546 0888 022700 000000        		    cmp #0, R0
0546 088C 001003               		    bne 0894h
0546 088E                      		//228     if((displaystatus() & 1) == 0) putc(0233); // Включение режима 256x256
0546 088E 112700 000233        		    movb #155, R0
0546 0892 104016               		    emt 14.
0546 0894                      		//229     putc(0x9A); // Выключение курсора
0546 0894 112700 000232        		    movb #154, R0
0546 0898 104016               		    emt 14.
0546 089A                      		//230     *(uint16_t*)0177706 = 731; // Запуск таймера
0546 089A 012737 001333 177706 		    mov #731, @#65478
0546 08A0                      		//231     *(uint16_t*)0177712 = 0160; // Запуск таймера
0546 08A0 012737 000160 177712 		    mov #112, @#65482
0546 08A6                      		//232     *(uint16_t*)0177660 = 64; // Выключаем прерывание клавиатуры
0546 08A6 012737 000100 177660 		    mov #64, @#65456
0546 08AC                      		//234     gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486;
0546 08AC 012737 000015 005646 		    mov #13, @#2982
0546 08B2                      		//234     gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486;
0546 08B2 012737 000012 005650 		    mov #10, @#2984
0546 08B8                      		//234     gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486;
0546 08B8 012737 000024 005666 		    mov #20, @#2998
0546 08BE                      		//234     gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486;
0546 08BE 012737 050006 005664 		    mov #20486, @#2996
0546 08C4                      		//235     startGame();
0546 08C4 004737 001302        		    jsr PC, @#706
0546 08C8                      		//237     for(;;)
0546 08C8                      		//238     {
0546 08C8 004737 001210        		    jsr PC, @#648
0546 08CC                      		//240         draw((void*)045020, bmpLogo, 8, 32);
0546 08CC 012746 000040        		    mov #32, -(SP)
0546 08D0 012746 000010        		    mov #8, -(SP)
0546 08D4 012746 006504        		    mov #3396, -(SP)
0546 08D8 012701 045020        		    mov #18960, R1
0546 08DC 012600               		    mov (SP)+, R0
0546 08DE 012602               		    mov (SP)+, R2
0546 08E0 012603               		    mov (SP)+, R3
0546 08E2 004737 001144        		    jsr PC, @#612
0546 08E6                      		//241         puttext2(txtMenu);
0546 08E6 012746 006276        		    mov #3262, -(SP)
0546 08EA 004737 004004        		    jsr PC, @#2052
0546 08EE 062706 000002        		    add #2, SP
0546 08F2                      		//242         for(;;)
0546 08F2                      		//243         {
0546 08F2 004737 001234        		    jsr PC, @#668
0546 08F6                      		//245             switch(getc2())
0546 08F6 004737 004124        		    jsr PC, @#2132
0546 08FA 004737 001042        		    jsr PC, @#546
0546 08FE 004422               		    jsr R4, (R2)+
0546 0900 000060               		    
0546 0902 004454               		    jsr R4, @-(R4)
0546 0904 000061               		    
0546 0906 004506               		    jsr R5, SP
0546 0908 000062               		    
0546 090A 004540               		    jsr R5, -(R0)
0546 090C 000063               		    
0546 090E 000000               		    halt
0546 0910 004572 012737        		    jsr R5, @5599(R2)
0546 0914 000011               		    
0546 0916 005646               		    sbc -(SP)
0546 0918                      		//247                 case '0': gameWidth=9;  gameHeight=9;  bombsCnt=3;  playfieldVA=21006; break;
0546 0918 012737 000011 005650 		    mov #9, @#2984
0546 091E                      		//247                 case '0': gameWidth=9;  gameHeight=9;  bombsCnt=3;  playfieldVA=21006; break;
0546 091E 012737 000003 005666 		    mov #3, @#2998
0546 0924                      		//247                 case '0': gameWidth=9;  gameHeight=9;  bombsCnt=3;  playfieldVA=21006; break;
0546 0924 012737 051016 005664 		    mov #21006, @#2996
0546 092A                      		//247                 case '0': gameWidth=9;  gameHeight=9;  bombsCnt=3;  playfieldVA=21006; break;
0546 092A 000450               		    br 097Ch
0546 092C                      		//248                 case '1': gameWidth=9;  gameHeight=9;  bombsCnt=10; playfieldVA=21006; break;
0546 092C                      		//248                 case '1': gameWidth=9;  gameHeight=9;  bombsCnt=10; playfieldVA=21006; break;
0546 092C 012737 000011 005646 		    mov #9, @#2982
0546 0932                      		//248                 case '1': gameWidth=9;  gameHeight=9;  bombsCnt=10; playfieldVA=21006; break;
0546 0932 012737 000011 005650 		    mov #9, @#2984
0546 0938                      		//248                 case '1': gameWidth=9;  gameHeight=9;  bombsCnt=10; playfieldVA=21006; break;
0546 0938 012737 000012 005666 		    mov #10, @#2998
0546 093E                      		//248                 case '1': gameWidth=9;  gameHeight=9;  bombsCnt=10; playfieldVA=21006; break;
0546 093E 012737 051016 005664 		    mov #21006, @#2996
0546 0944                      		//248                 case '1': gameWidth=9;  gameHeight=9;  bombsCnt=10; playfieldVA=21006; break;
0546 0944 000433               		    br 097Ch
0546 0946                      		//249                 case '2': gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486; break;
0546 0946                      		//249                 case '2': gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486; break;
0546 0946 012737 000015 005646 		    mov #13, @#2982
0546 094C                      		//249                 case '2': gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486; break;
0546 094C 012737 000012 005650 		    mov #10, @#2984
0546 0952                      		//249                 case '2': gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486; break;
0546 0952 012737 000024 005666 		    mov #20, @#2998
0546 0958                      		//249                 case '2': gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486; break;
0546 0958 012737 050006 005664 		    mov #20486, @#2996
0546 095E                      		//249                 case '2': gameWidth=13; gameHeight=10; bombsCnt=20; playfieldVA=20486; break;
0546 095E 000416               		    br 097Ch
0546 0960                      		//250                 case '3': gameWidth=16; gameHeight=14; bombsCnt=43; playfieldVA=18432; break;
0546 0960                      		//250                 case '3': gameWidth=16; gameHeight=14; bombsCnt=43; playfieldVA=18432; break;
0546 0960 012737 000020 005646 		    mov #16, @#2982
0546 0966                      		//250                 case '3': gameWidth=16; gameHeight=14; bombsCnt=43; playfieldVA=18432; break;
0546 0966 012737 000016 005650 		    mov #14, @#2984
0546 096C                      		//250                 case '3': gameWidth=16; gameHeight=14; bombsCnt=43; playfieldVA=18432; break;
0546 096C 012737 000053 005666 		    mov #43, @#2998
0546 0972                      		//250                 case '3': gameWidth=16; gameHeight=14; bombsCnt=43; playfieldVA=18432; break;
0546 0972 012737 044000 005664 		    mov #18432, @#2996
0546 0978                      		//250                 case '3': gameWidth=16; gameHeight=14; bombsCnt=43; playfieldVA=18432; break;
0546 0978 000401               		    br 097Ch
0546 097A                      		//251                 default: continue;
0546 097A                      		//251                 default: continue;
0546 097A 000673               		    br 08F2h
0546 097C                      		//253             break;
0546 097C 000401               		    br 0980h
0546 097E 000671               		    br 08F2h
0546 0980                      		//256         startGame();
0546 0980 004737 001302        		    jsr PC, @#706
0546 0984 000641               		    br 08C8h
0546 0986 000207               		    ret
0546 0988                      		calcCell2:
0546 0988                      		//389     return (y<<10) + (x<<2) + playfieldVA;
0546 0988 016600 000004        		    mov 4(SP), R0
0546 098C 060000               		    add R0, R0
0546 098E 060000               		    add R0, R0
0546 0990 060000               		    add R0, R0
0546 0992 060000               		    add R0, R0
0546 0994 060000               		    add R0, R0
0546 0996 060000               		    add R0, R0
0546 0998 060000               		    add R0, R0
0546 099A 060000               		    add R0, R0
0546 099C 060000               		    add R0, R0
0546 099E 060000               		    add R0, R0
0546 09A0 010046               		    mov R0, -(SP)
0546 09A2 016600 000004        		    mov 4(SP), R0
0546 09A6 060000               		    add R0, R0
0546 09A8 060000               		    add R0, R0
0546 09AA 010001               		    mov R0, R1
0546 09AC 012600               		    mov (SP)+, R0
0546 09AE 060100               		    add R1, R0
0546 09B0 063700 005664        		    add @#2996, R0
0546 09B4 000207               		    ret
0546 09B6 000207               		    ret
0546 09B8                      		open_check:
0546 09B8                      		//407     if(open_x < gameWidth && open_y < gameHeight && (*open_a & 0x80) != 0) open_n++;
0546 09B8 023737 005646 006426 		    cmp @#2982, @#3350
0546 09BE 101417               		    blos 09DEh
0546 09C0 023737 005650 006430 		    cmp @#2984, @#3352
0546 09C6 101413               		    blos 09DEh
0546 09C8 012700 006434        		    mov #3356, R0
0546 09CC 117000 000000        		    movb @0(R0), R0
0546 09D0 142700 177577        		    bicb #65407, R0
0546 09D4 122700 000000        		    cmpb #0, R0
0546 09D8 001402               		    beq 09DEh
0546 09DA                      		//407     if(open_x < gameWidth && open_y < gameHeight && (*open_a & 0x80) != 0) open_n++;
0546 09DA 005237 006432        		    inc @#3354
0546 09DE 000207               		    ret
0546 09E0                      		open_int:
0546 09E0                      		//412     if(open_x >= gameWidth || open_y >= gameHeight) return;
0546 09E0 023737 005646 006426 		    cmp @#2982, @#3350
0546 09E6 101404               		    blos 09F0h
0546 09E8 023737 005650 006430 		    cmp @#2984, @#3352
0546 09EE 101001               		    bhi 09F2h
0546 09F0                      		//412     if(open_x >= gameWidth || open_y >= gameHeight) return;
0546 09F0 000207               		    ret
0546 09F2                      		//413     if(*open_a & 0x80)
0546 09F2 012700 006434        		    mov #3356, R0
0546 09F6 117000 000000        		    movb @0(R0), R0
0546 09FA 142700 177577        		    bicb #65407, R0
0546 09FE 005700               		    tst R0
0546 0A00 001404               		    beq 0A0Ah
0546 0A02                      		//414     {
0546 0A02 012737 000001 005656 		    mov #1, @#2990
0546 0A08                      		//416         return;
0546 0A08 000207               		    ret
0546 0A0A                      		//418     if(*open_a != 0) return;
0546 0A0A 012700 006434        		    mov #3356, R0
0546 0A0E 117000 000000        		    movb @0(R0), R0
0546 0A12 122700 000000        		    cmpb #0, R0
0546 0A16 001401               		    beq 0A1Ah
0546 0A18                      		//418     if(*open_a != 0) return;
0546 0A18 000207               		    ret
0546 0A1A                      		//419     open_n = 3;
0546 0A1A 012737 000003 006432 		    mov #3, @#3354
0546 0A20                      		//420     open_x--; open_y--; open_a -= 17;
0546 0A20 005337 006426        		    dec @#3350
0546 0A24                      		//420     open_x--; open_y--; open_a -= 17;
0546 0A24 005337 006430        		    dec @#3352
0546 0A28                      		//420     open_x--; open_y--; open_a -= 17;
0546 0A28 162737 000021 006434 		    sub #17, @#3356
0546 0A2E                      		//421     open_check(); open_x++;  open_a++;
0546 0A2E 004737 004670        		    jsr PC, @#2488
0546 0A32                      		//421     open_check(); open_x++;  open_a++;
0546 0A32 005237 006426        		    inc @#3350
0546 0A36                      		//421     open_check(); open_x++;  open_a++;
0546 0A36 005237 006434        		    inc @#3356
0546 0A3A                      		//422     open_check(); open_x++;  open_a++;
0546 0A3A 004737 004670        		    jsr PC, @#2488
0546 0A3E                      		//422     open_check(); open_x++;  open_a++;
0546 0A3E 005237 006426        		    inc @#3350
0546 0A42                      		//422     open_check(); open_x++;  open_a++;
0546 0A42 005237 006434        		    inc @#3356
0546 0A46                      		//423     open_check(); open_y++;  open_a+=16;
0546 0A46 004737 004670        		    jsr PC, @#2488
0546 0A4A                      		//423     open_check(); open_y++;  open_a+=16;
0546 0A4A 005237 006430        		    inc @#3352
0546 0A4E                      		//423     open_check(); open_y++;  open_a+=16;
0546 0A4E 062737 000020 006434 		    add #16, @#3356
0546 0A54                      		//424     open_check(); open_x-=2; open_a-=2;
0546 0A54 004737 004670        		    jsr PC, @#2488
0546 0A58                      		//424     open_check(); open_x-=2; open_a-=2;
0546 0A58 162737 000002 006426 		    sub #2, @#3350
0546 0A5E                      		//424     open_check(); open_x-=2; open_a-=2;
0546 0A5E 162737 000002 006434 		    sub #2, @#3356
0546 0A64                      		//425     open_check(); open_y++;  open_a+=16;
0546 0A64 004737 004670        		    jsr PC, @#2488
0546 0A68                      		//425     open_check(); open_y++;  open_a+=16;
0546 0A68 005237 006430        		    inc @#3352
0546 0A6C                      		//425     open_check(); open_y++;  open_a+=16;
0546 0A6C 062737 000020 006434 		    add #16, @#3356
0546 0A72                      		//426     open_check(); open_x++;  open_a++;
0546 0A72 004737 004670        		    jsr PC, @#2488
0546 0A76                      		//426     open_check(); open_x++;  open_a++;
0546 0A76 005237 006426        		    inc @#3350
0546 0A7A                      		//426     open_check(); open_x++;  open_a++;
0546 0A7A 005237 006434        		    inc @#3356
0546 0A7E                      		//427     open_check(); open_x++;  open_a++;
0546 0A7E 004737 004670        		    jsr PC, @#2488
0546 0A82                      		//427     open_check(); open_x++;  open_a++;
0546 0A82 005237 006426        		    inc @#3350
0546 0A86                      		//427     open_check(); open_x++;  open_a++;
0546 0A86 005237 006434        		    inc @#3356
0546 0A8A                      		//428     open_check();
0546 0A8A 004737 004670        		    jsr PC, @#2488
0546 0A8E                      		//429     open_x--; open_y--; open_a -= 17;
0546 0A8E 005337 006426        		    dec @#3350
0546 0A92                      		//429     open_x--; open_y--; open_a -= 17;
0546 0A92 005337 006430        		    dec @#3352
0546 0A96                      		//429     open_x--; open_y--; open_a -= 17;
0546 0A96 162737 000021 006434 		    sub #17, @#3356
0546 0A9C                      		//430     *open_a = open_n;
0546 0A9C 012700 006434        		    mov #3356, R0
0546 0AA0 013701 006432        		    mov @#3354, R1
0546 0AA4 110170 000000        		    movb R1, @0(R0)
0546 0AA8                      		//431     if(open_n == 3)
0546 0AA8 022737 000003 006432 		    cmp #3, @#3354
0546 0AAE 001076               		    bne 0B2Ch
0546 0AB0                      		//432     {
0546 0AB0 005337 006426        		    dec @#3350
0546 0AB4                      		//433         open_x--; open_y--;  open_a-=17;
0546 0AB4 005337 006430        		    dec @#3352
0546 0AB8                      		//433         open_x--; open_y--;  open_a-=17;
0546 0AB8 162737 000021 006434 		    sub #17, @#3356
0546 0ABE                      		//434         open_int();  open_x++;  open_a++;
0546 0ABE 004737 004740        		    jsr PC, @#2528
0546 0AC2                      		//434         open_int();  open_x++;  open_a++;
0546 0AC2 005237 006426        		    inc @#3350
0546 0AC6                      		//434         open_int();  open_x++;  open_a++;
0546 0AC6 005237 006434        		    inc @#3356
0546 0ACA                      		//435         open_int();  open_x++;  open_a++;
0546 0ACA 004737 004740        		    jsr PC, @#2528
0546 0ACE                      		//435         open_int();  open_x++;  open_a++;
0546 0ACE 005237 006426        		    inc @#3350
0546 0AD2                      		//435         open_int();  open_x++;  open_a++;
0546 0AD2 005237 006434        		    inc @#3356
0546 0AD6                      		//436         open_int();  open_y++;  open_a+=16;
0546 0AD6 004737 004740        		    jsr PC, @#2528
0546 0ADA                      		//436         open_int();  open_y++;  open_a+=16;
0546 0ADA 005237 006430        		    inc @#3352
0546 0ADE                      		//436         open_int();  open_y++;  open_a+=16;
0546 0ADE 062737 000020 006434 		    add #16, @#3356
0546 0AE4                      		//437         open_int();  open_x-=2; open_a-=2;
0546 0AE4 004737 004740        		    jsr PC, @#2528
0546 0AE8                      		//437         open_int();  open_x-=2; open_a-=2;
0546 0AE8 162737 000002 006426 		    sub #2, @#3350
0546 0AEE                      		//437         open_int();  open_x-=2; open_a-=2;
0546 0AEE 162737 000002 006434 		    sub #2, @#3356
0546 0AF4                      		//438         open_int();  open_y++;  open_a+=16;
0546 0AF4 004737 004740        		    jsr PC, @#2528
0546 0AF8                      		//438         open_int();  open_y++;  open_a+=16;
0546 0AF8 005237 006430        		    inc @#3352
0546 0AFC                      		//438         open_int();  open_y++;  open_a+=16;
0546 0AFC 062737 000020 006434 		    add #16, @#3356
0546 0B02                      		//439         open_int();  open_x++;  open_a++;
0546 0B02 004737 004740        		    jsr PC, @#2528
0546 0B06                      		//439         open_int();  open_x++;  open_a++;
0546 0B06 005237 006426        		    inc @#3350
0546 0B0A                      		//439         open_int();  open_x++;  open_a++;
0546 0B0A 005237 006434        		    inc @#3356
0546 0B0E                      		//440         open_int();  open_x++;  open_a++;
0546 0B0E 004737 004740        		    jsr PC, @#2528
0546 0B12                      		//440         open_int();  open_x++;  open_a++;
0546 0B12 005237 006426        		    inc @#3350
0546 0B16                      		//440         open_int();  open_x++;  open_a++;
0546 0B16 005237 006434        		    inc @#3356
0546 0B1A                      		//441         open_int();
0546 0B1A 004737 004740        		    jsr PC, @#2528
0546 0B1E                      		//442         open_x--;  open_y--; open_a -= 17;
0546 0B1E 005337 006426        		    dec @#3350
0546 0B22                      		//442         open_x--;  open_y--; open_a -= 17;
0546 0B22 005337 006430        		    dec @#3352
0546 0B26                      		//442         open_x--;  open_y--; open_a -= 17;
0546 0B26 162737 000021 006434 		    sub #17, @#3356
0546 0B2C                      		//444     redrawCell012(open_x, open_y);
0546 0B2C 013746 006430        		    mov @#3352, -(SP)
0546 0B30 013746 006426        		    mov @#3350, -(SP)
0546 0B34 004737 003676        		    jsr PC, @#1982
0546 0B38 062706 000004        		    add #4, SP
0546 0B3C 000207               		    ret
0546 0B3E                      		drawNumber:
0546 0B3E 162706 000002        		    sub #2, SP
0546 0B42                      		//495     uint8_t c=3;
0546 0B42 112766 000003 000000 		    movb #3, 0(SP)
0546 0B48                      		//496     do
0546 0B48                      		//497     {
0546 0B48 016600 000006        		    mov 6(SP), R0
0546 0B4C 012701 000012        		    mov #10, R1
0546 0B50 004737 001076        		    jsr PC, @#574
0546 0B54 010066 000006        		    mov R0, 6(SP)
0546 0B58                      		//499         drawb(d, bmpN0 + (mod_div << 6), 3, 21);
0546 0B58 012746 000025        		    mov #21, -(SP)
0546 0B5C 012746 000003        		    mov #3, -(SP)
0546 0B60 012700 013524        		    mov #5972, R0
0546 0B64 010046               		    mov R0, -(SP)
0546 0B66 013700 001122        		    mov @#594, R0
0546 0B6A 060000               		    add R0, R0
0546 0B6C 060000               		    add R0, R0
0546 0B6E 060000               		    add R0, R0
0546 0B70 060000               		    add R0, R0
0546 0B72 060000               		    add R0, R0
0546 0B74 060000               		    add R0, R0
0546 0B76 010001               		    mov R0, R1
0546 0B78 012600               		    mov (SP)+, R0
0546 0B7A 060100               		    add R1, R0
0546 0B7C 010046               		    mov R0, -(SP)
0546 0B7E 016601 000012        		    mov 10(SP), R1
0546 0B82 012600               		    mov (SP)+, R0
0546 0B84 012602               		    mov (SP)+, R2
0546 0B86 012603               		    mov (SP)+, R3
0546 0B88 004737 001124        		    jsr PC, @#596
0546 0B8C                      		//500         d -= 3;
0546 0B8C 162766 000003 000004 		    sub #3, 4(SP)
0546 0B92                      		//501     } while(--c);
0546 0B92 012700 000000        		    mov #0, R0
0546 0B96 060600               		    add SP, R0
0546 0B98 105310               		    decb (R0)
0546 0B9A 111000               		    movb (R0), R0
0546 0B9C 005700               		    tst R0
0546 0B9E 001324               		    bne 0B48h
0546 0BA0 062706 000002        		    add #2, SP
0546 0BA4 000207               		    ret
0549 0D1F                      		drawTransImage:
0550 0D1F 012702 000020        		    MOV     #16, R2
0551 0D23 042011               		drawTransImag1:	BIC     (R0)+, (R1)
0552 0D25 052021               		    BIS     (R0)+, (R1)+
0553 0D27 042011               		    BIC     (R0)+, (R1)
0554 0D29 052021               		    BIS     (R0)+, (R1)+
0555 0D2B 062701 000074        		    ADD     #60, R1
0556 0D2F 077207               		    SOB	    R2, drawTransImag1
0557 0D31 000207               		    RTS     PC
0561 0D33                      		drawImage:
0562 0D33 012702 000020        		    MOV     #16, R2
0563 0D37                      		drawImage1:
0564 0D37 012021               		    MOV     (R0)+, (R1)+
0565 0D39 012021               		    MOV     (R0)+, (R1)+
0566 0D3B 062701 000074        		    ADD     #60, R1
0567 0D3F 077205               		    SOB	R2, drawImage1
0568 0D41 000207               		    RTS	PC
0572 0D43                      		.include "resources.inc"
0001 0D43                      		align 2
0002 0D44 000000 012000 000000 		bmpLogo:   	insert_bitmap2 "resources/logo.bmp",  128, 37
0004 11E4 000000 000000 000000 		bmpCursor:  	insert_bitmap2t "resources/cursor.bmp",  16, 16
0006 1264 177777 037777 177777 		bmpUn:   	insert_bitmap2 "resources/un.bmp", 16, 16
0007 12A4 177777 037777 177777 		bmpF:    	insert_bitmap2 "resources/f.bmp",  16, 16
0008 12E4 177777 037777 177777 		bmpQ:    	insert_bitmap2 "resources/q.bmp",  16, 16
0009 1324 052525 052525 000001 		bmp0:    	insert_bitmap2 "resources/0.bmp",  16, 16
0010 1364 052525 052525 000001 		bmp1:    	insert_bitmap2 "resources/1.bmp",  16, 16
0011 13A4 052525 052525 000001 		bmp2:    	insert_bitmap2 "resources/2.bmp",  16, 16
0012 13E4 052525 052525 000001 		bmp3:    	insert_bitmap2 "resources/3.bmp",  16, 16
0013 1424 052525 052525 000001 		bmp4:    	insert_bitmap2 "resources/4.bmp",  16, 16
0014 1464 052525 052525 000001 		bmp5:    	insert_bitmap2 "resources/5.bmp",  16, 16
0015 14A4 052525 052525 000001 		bmp6:    	insert_bitmap2 "resources/6.bmp",  16, 16
0016 14E4 052525 052525 000001 		bmp7:    	insert_bitmap2 "resources/7.bmp",  16, 16
0017 1524 052525 052525 000001 		bmp8:    	insert_bitmap2 "resources/8.bmp",  16, 16
0018 1564 052525 052525 000001 		bmpB:    	insert_bitmap2 "resources/b.bmp",  16, 16
0021 15A4 177777 177777 037777 		bmpGood: 	insert_bitmap2 "resources/good.bmp", 24, 24
0022 1634 177777 177777 037777 		bmpBad:  	insert_bitmap2 "resources/bad.bmp", 24, 24
0023 16C4 177777 177777 037777 		bmpWin:  	insert_bitmap2 "resources/win.bmp", 24, 24
0025 1754 177774 171417 031777 		bmpN0:   	insert_bitmap2 "resources/n0.bmp", 12, 21
0026 1794 010420 040401 030104 		bmpN1:   	insert_bitmap2 "resources/n1.bmp", 12, 21
0027 17D4 177774 170417 031777 		bmpN2:   	insert_bitmap2 "resources/n2.bmp", 12, 21
0028 1814 177774 170417 031777 		bmpN3:   	insert_bitmap2 "resources/n3.bmp", 12, 21
0029 1854 010420 041401 030104 		bmpN4:   	insert_bitmap2 "resources/n4.bmp", 12, 21
0030 1894 177774 171417 011777 		bmpN5:   	insert_bitmap2 "resources/n5.bmp", 12, 21
0031 18D4 177774 171417 011777 		bmpN6:   	insert_bitmap2 "resources/n6.bmp", 12, 21
0032 1914 177774 170417 031777 		bmpN7:   	insert_bitmap2 "resources/n7.bmp", 12, 21
0033 1954 177774 171417 031777 		bmpN8:   	insert_bitmap2 "resources/n8.bmp", 12, 21
0034 1994 177774 171417 031777 		bmpN9:   	insert_bitmap2 "resources/n9.bmp", 12, 21
0036 19D4 042104 042100 010421 		bmpBlock:   	insert_bitmap2 "resources/block.bmp", 16, 16                       
0574 1A14                      		endOfROM:              
0578 1A14 