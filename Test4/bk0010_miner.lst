0004 0000                      		CONVERT1251TOKOI8R
0005 0000                      		DECIMALNUMBERS
0006 0000                      		ORG 01000
0011 0200                      		EntryPoint:
0012 0200 012706 040000        				MOV #16384, SP
0013 0204 013707 003442        		        MOV @#main, PC
0015 0208                      		SHLW:
0016 0208                      		SHRW:
0017 0208                      		DIVWI:
0018 0208                      		MODWI:
0019 0208                      		MULWI:
0020 0208                      		__SWITCH:
0021 0208                      		MEMSET:
0022 0208                      		GOTOXY:
0023 0208                      		PUTTEXT:
0024 0208                      		PUTC:
0025 0208 012707 003442        		    MOV #MAIN, PC
0389 020C                      		rand:
0389 020C                      		//297     rand_state = (rand_state << 2) ^ (rand_state >> 5);
0389 020C 013700 004523        		    mov @#2387, R0
0389 0210 012701 000002        		    mov #2, R1
0389 0214 004737 004641        		    jsr PC, @#2465
0389 0218 010046               		    mov R0, -(SP)
0389 021A 013700 004523        		    mov @#2387, R0
0389 021E 012701 000005        		    mov #5, R1
0389 0222 004737 001010        		    jsr PC, @#520
0389 0226 010001               		    mov R0, R1
0389 0228 012600               		    mov (SP)+, R0
0389 022A 074100               		    xor R1, R0
0389 022C 010037 004523        		    mov R0, @#2387
0389 0230                      		//298     return rand_state;
0389 0230 013700 004523        		    mov @#2387, R0
0389 0234 000207               		    ret
0389 0236                      		startGame:
0389 0236 162706 000006        		    sub #6, SP
0389 023A                      		//119     gameWidth = *params++;
0389 023A 016600 000010        		    mov 8(SP), R0
0389 023E 062766 000002 000010 		    add #2, 8(SP)
0389 0244 011037 004232        		    mov (R0), @#2202
0389 0248                      		//120 	gameHeight = *params++;
0389 0248 016600 000010        		    mov 8(SP), R0
0389 024C 062766 000002 000010 		    add #2, 8(SP)
0389 0252 011037 004234        		    mov (R0), @#2204
0389 0256                      		//121 	bombsCnt = *params++;
0389 0256 016600 000010        		    mov 8(SP), R0
0389 025A 062766 000002 000010 		    add #2, 8(SP)
0389 0260 011037 004246        		    mov (R0), @#2214
0389 0264                      		//122 	playfieldVA = *params;
0389 0264 017637 000010 004244 		    mov @8(SP), @#2212
0389 026A                      		//125 	clearScreen();
0389 026A 004737 002072        		    jsr PC, @#1082
0389 026E                      		//126 	fillBlocks();
0389 026E 004737 004525        		    jsr PC, @#2389
0389 0272                      		//129 	cursorX = gameWidth / 2;
0389 0272 013700 004232        		    mov @#2202, R0
0389 0276 012701 000002        		    mov #2, R1
0389 027A 004737 001010        		    jsr PC, @#520
0389 027E 010037 004240        		    mov R0, @#2208
0389 0282                      		//130     cursorY = gameHeight / 2;
0389 0282 013700 004234        		    mov @#2204, R0
0389 0286 012701 000002        		    mov #2, R1
0389 028A 004737 001010        		    jsr PC, @#520
0389 028E 010037 004242        		    mov R0, @#2210
0389 0292                      		//133     bombsPutted = 0;
0389 0292 005037 004250        		    clr @#2216
0389 0296                      		//134     gameOverFlag = 0;
0389 0296 005037 004236        		    clr @#2206
0389 029A                      		//135     time = 0;
0389 029A 005037 004252        		    clr @#2218
0389 029E                      		//138     uint8_t i = 0;
0389 029E 105066 000000        		    clrb 0(SP)
0389 02A2                      		//139     do 
0389 02A2                      		//140     {
0389 02A2 012700 004256        		    mov #2222, R0
0389 02A6 116601 000000        		    movb 0(SP), R1
0389 02AA 042701 177400        		    bic #65280, R1
0389 02AE 060100               		    add R1, R0
0389 02B0 112710 000376        		    movb #254, (R0)
0389 02B4                      		//142         userMarks[i] = 0;
0389 02B4 012700 004256        		    mov #2222, R0
0389 02B8 116601 000000        		    movb 0(SP), R1
0389 02BC 042701 177400        		    bic #65280, R1
0389 02C0 060100               		    add R1, R0
0389 02C2 105010               		    clrb (R0)
0389 02C4                      		//143         i++;
0389 02C4 105266 000000        		    incb 0(SP)
0389 02C8                      		//144     } while(i != 0);
0389 02C8 116600 000000        		    movb 0(SP), R0
0389 02CC 122700 000000        		    cmpb #0, R0
0389 02D0 001350               		    bne 02A2h
0389 02D2                      		//147     drawSmile(bmpGood);
0389 02D2 012746 011024        		    mov #4628, -(SP)
0389 02D6 004737 002256        		    jsr PC, @#1198
0389 02DA 062706 000002        		    add #2, SP
0389 02DE                      		//150 	drawPlayField();
0389 02DE 004737 002304        		    jsr PC, @#1220
0389 02E2                      		//153     leftNumber();
0389 02E2 004737 002406        		    jsr PC, @#1286
0389 02E6                      		//154     rightNumber();
0389 02E6 004737 002524        		    jsr PC, @#1364
0389 02EA                      		//156     for(;;)
0389 02EA                      		//157     {
0389 02EA 013700 004236        		    mov @#2206, R0
0389 02EE 005700               		    tst R0
0389 02F0 001010               		    bne 0302h
0389 02F2 022737 001747 004252 		    cmp #999, @#2218
0389 02F8 001404               		    beq 0302h
0389 02FA                      		//159         {
0389 02FA 005237 004252        		    inc @#2218
0389 02FE                      		//168             rightNumber();
0389 02FE 004737 002524        		    jsr PC, @#1364
0389 0302                      		//172 		if((*(uint16_t*)0177660 & 128) == 0) continue;
0389 0302 013700 177660        		    mov @#65456, R0
0389 0306 042700 177577        		    bic #65407, R0
0389 030A 022700 000000        		    cmp #0, R0
0389 030E 001001               		    bne 0312h
0389 0310                      		//172 		if((*(uint16_t*)0177660 & 128) == 0) continue;
0389 0310 000754               		    br 02EAh
0389 0312                      		//175 		switch(*(uint16_t*)0177662)
0389 0312 013700 177662        		    mov @#65458, R0
0389 0316 004737 001010        		    jsr PC, @#520
0389 031A 001462               		    beq 0380h
0389 031C 000010               		    
0389 031E 001504               		    beq 03A8h
0389 0320 000031               		    
0389 0322 001540               		    beq 03E4h
0389 0324 000032               		    
0389 0326 001572               		    beq 041Ch
0389 0328 000033               		    
0389 032A 001630               		    beq 025Ch
0389 032C 000040               		    
0389 032E 000000               		    halt
0389 0330 000000               		    halt
0389 0332                      		//177             case 8:
0389 0332                      		//178                 if(cursorX==0) continue;
0389 0332 022737 000000 004240 		    cmp #0, @#2208
0389 0338                      		//178                 if(cursorX==0) continue;
0389 0338                      		//179 	            hideCursor();
0389 0338 004737 002546        		    jsr PC, @#1382
0389 033C                      		//180                 cursorX--;
0389 033C 005337 004240        		    dec @#2208
0389 0340                      		//181                 drawCursor();
0389 0340 004737 002570        		    jsr PC, @#1400
0389 0344                      		//182                 continue;
0389 0344                      		//183                 break;
0389 0344                      		//184             case 0x19:
0389 0344                      		//185                 if(cursorX+1 == gameWidth) continue;
0389 0344 013700 004240        		    mov @#2208, R0
0389 0348 062700 000001        		    add #1, R0
0389 034C 023700 004232        		    cmp @#2202, R0
0389 0350                      		//185                 if(cursorX+1 == gameWidth) continue;
0389 0350 000763               		    br 0338h
0389 0352                      		//186                 hideCursor();
0389 0352 004737 002546        		    jsr PC, @#1382
0389 0356                      		//187                 cursorX++;
0389 0356 005237 004240        		    inc @#2208
0389 035A                      		//188                 drawCursor();
0389 035A 004737 002570        		    jsr PC, @#1400
0389 035E                      		//189                 break;
0389 035E 000705               		    br 02EAh
0389 0360                      		//190             case 0x1A:
0389 0360                      		//191                 if(cursorY == 0) continue;
0389 0360 022737 000000 004242 		    cmp #0, @#2210
0389 0366 001301               		    bne 02EAh
0389 0368                      		//191                 if(cursorY == 0) continue;
0389 0368 012707 002062        		    mov #1074, PC
0389 036C                      		//192                 hideCursor();
0389 036C 004737 002546        		    jsr PC, @#1382
0389 0370                      		//193                 cursorY--;
0389 0370 005337 004242        		    dec @#2210
0389 0374                      		//194                 drawCursor();
0389 0374 004737 002570        		    jsr PC, @#1400
0389 0378                      		//195                 break;
0389 0378 000754               		    br 0352h
0389 037A                      		//196             case 0x1B:
0389 037A                      		//197                 if(cursorY+1 == gameHeight) continue;
0389 037A 013700 004242        		    mov @#2210, R0
0389 037E 062700 000001        		    add #1, R0
0389 0382 023700 004234        		    cmp @#2204, R0
0389 0386 001261               		    bne 02EAh
0389 0388                      		//197                 if(cursorY+1 == gameHeight) continue;
0389 0388 000524               		    br 0432h
0389 038A                      		//198                 hideCursor();
0389 038A 004737 002546        		    jsr PC, @#1382
0389 038E                      		//199                 cursorY++;
0389 038E 005237 004242        		    inc @#2210
0389 0392                      		//200                 drawCursor();
0389 0392 004737 002570        		    jsr PC, @#1400
0389 0396                      		//201                 break;
0389 0396 000752               		    br 036Ch
0389 0398                      		//202             case ' ':
0389 0398                      		//203                 if(!bombsPutted) putBombs();
0389 0398 013700 004250        		    mov @#2216, R0
0389 039C 005700               		    tst R0
0389 039E 001245               		    bne 02EAh
0389 03A0                      		//203                 if(!bombsPutted) putBombs();
0389 03A0 004737 002572        		    jsr PC, @#1402
0389 03A4                      		//204                 if(gameOverFlag) continue;
0389 03A4 013700 004236        		    mov @#2206, R0
0389 03A8 005700               		    tst R0
0389 03AA 001503               		    beq 0432h
0389 03AC                      		//204                 if(gameOverFlag) continue;
0389 03AC 000756               		    br 038Ah
0389 03AE                      		//205             	open(cursorX, cursorY);
0389 03AE 013746 004240        		    mov @#2208, -(SP)
0389 03B2 013746 004242        		    mov @#2210, -(SP)
0389 03B6 004737 003022        		    jsr PC, @#1554
0389 03BA 062706 000004        		    add #4, SP
0389 03BE                      		//206             	drawCursor();
0389 03BE 004737 002570        		    jsr PC, @#1400
0389 03C2                      		//207             	checkWin();
0389 03C2 004737 003254        		    jsr PC, @#1708
0389 03C6                      		//208                 continue;
0389 03C6 000621               		    br 02EAh
0389 03C8                      		//209             default:
0389 03C8 013700 004236        		    mov @#2206, R0
0389 03CC 005700               		    tst R0
0389 03CE 001461               		    beq 0432h
0389 03D0                      		//210                 if(gameOverFlag) continue;
0389 03D0 000751               		    br 03A4h
0389 03D2                      		//211                 unsigned a = cursorX + cursorY * 16;
0389 03D2 013700 004240        		    mov @#2208, R0
0389 03D6 010046               		    mov R0, -(SP)
0389 03D8 013700 004242        		    mov @#2210, R0
0389 03DC 012701 000020        		    mov #16, R1
0389 03E0 004737 001010        		    jsr PC, @#520
0389 03E4 010001               		    mov R0, R1
0389 03E6 012600               		    mov (SP)+, R0
0389 03E8 060100               		    add R1, R0
0389 03EA 010066 000002        		    mov R0, 2(SP)
0389 03EE                      		//212                 unsigned t = userMarks[a] + 1;
0389 03EE 012700 004256        		    mov #2222, R0
0389 03F2 066600 000002        		    add 2(SP), R0
0389 03F6 111000               		    movb (R0), R0
0389 03F8 042700 177400        		    bic #65280, R0
0389 03FC 062700 000001        		    add #1, R0
0389 0400 010066 000004        		    mov R0, 4(SP)
0389 0404                      		//213                 userMarks[a] = t<3 ? t : 0;
0389 0404 012700 004256        		    mov #2222, R0
0389 0408 066600 000002        		    add 2(SP), R0
0389 040C 022766 000003 000004 		    cmp #3, 4(SP)
0389 0412 101715               		    blos 03AEh
0389 0414 016601 000004        		    mov 4(SP), R1
0389 0418 012707 001352        		    mov #746, PC
0389 041C 012701 001352        		    mov #746, R1
0389 0420 110110               		    movb R1, (R0)
0389 0422                      		//214 	            hideCursor();
0389 0422 004737 002546        		    jsr PC, @#1382
0389 0426                      		//215             	drawCursor();
0389 0426 004737 002570        		    jsr PC, @#1400
0389 042A                      		//216                 leftNumber();
0389 042A 004737 002406        		    jsr PC, @#1286
0389 042E                      		//217                 continue;
0389 042E 012707 001352        		    mov #746, PC
0389 0432 000717               		    br 03D2h
0389 0434 062706 000006        		    add #6, SP
0389 0438 000207               		    ret
0389 043A                      		clearScreen:
0389 043A                      		//370     memset((void*)040000, 0, 040000);
0389 043A 012746 040000        		    mov #16384, -(SP)
0389 043E 004256               		    jsr R2, @-(SP)
0389 0440 000000               		    halt
0389 0442 012746 040000        		    mov #16384, -(SP)
0389 0446 004737 001010        		    jsr PC, @#520
0389 044A 062706 000006        		    add #6, SP
0389 044E 000207               		    ret
0389 0450                      		print:
0389 0450 162706 000002        		    sub #2, SP
0389 0454                      		//379     do
0389 0454                      		//380     {
0389 0454 004256               		    jsr R2, @-(SP)
0389 0456 000004               		    iot
0389 0458 005266 000004        		    inc 4(SP)
0389 045C 111066 000000        		    movb (R0), 0(SP)
0389 0460                      		//382         gotoxy(*s++, y);
0389 0460 016600 000004        		    mov 4(SP), R0
0389 0464 005266 000004        		    inc 4(SP)
0389 0468 111000               		    movb (R0), R0
0389 046A 042700 177400        		    bic #65280, R0
0389 046E 010002               		    mov R0, R2
0389 0470 116600 000000        		    movb 0(SP), R0
0389 0474 042700 177400        		    bic #65280, R0
0389 0478 010001               		    mov R0, R1
0389 047A 004737 001010        		    jsr PC, @#520
0389 047E                      		//383         puttext(*s);
0389 047E 117600 000004        		    movb @4(SP), R0
0389 0482 042700 177400        		    bic #65280, R0
0389 0486 010046               		    mov R0, -(SP)
0389 0488 004737 001010        		    jsr PC, @#520
0389 048C 062706 000002        		    add #2, SP
0389 0490                      		//384         while(*s) s++;
0389 0490 117600 000004        		    movb @4(SP), R0
0389 0494 005700               		    tst R0
0389 0496 001403               		    beq 049Eh
0389 0498                      		//384         while(*s) s++;
0389 0498 005266 000004        		    inc 4(SP)
0389 049C 000771               		    br 0490h
0389 049E                      		//385     } while(*s != 0xFF)
0389 049E 117600 000004        		    movb @4(SP), R0
0389 04A2 122700 000377        		    cmpb #255, R0
0389 04A6 001326               		    bne 0454h
0389 04A8 062706 000002        		    add #2, SP
0389 04AC 000207               		    ret
0389 04AE                      		drawSmile:
0389 04AE                      		//350     draw((void*)040435, img, 4, 24);
0389 04AE 012703 040435        		    mov #16669, R3
0389 04B2 016602 000002        		    mov 2(SP), R2
0389 04B6 012700 000004        		    mov #4, R0
0389 04BA 012701 000030        		    mov #24, R1
0389 04BE 004737 004643        		    jsr PC, @#2467
0389 04C2 000207               		    ret
0389 04C4                      		drawPlayField:
0389 04C4 162706 000004        		    sub #4, SP
0389 04C8                      		//360     for(y=0; y<gameHeight; y++)
0389 04C8 005066 000002        		    clr 2(SP)
0389 04CC 023766 004234 000002 		    cmp @#2204, 2(SP)
0389 04D2 101424               		    blos 04FCh
0389 04D4                      		//361         for(x=0; x<gameWidth; x++)
0389 04D4 005066 000000        		    clr 0(SP)
0389 04D8 023766 004232 000000 		    cmp @#2202, 0(SP)
0389 04DE 101413               		    blos 04F6h
0389 04E0                      		//362            redrawCell012(x,y);
0389 04E0 016646 000000        		    mov 0(SP), -(SP)
0389 04E4 016646 000004        		    mov 4(SP), -(SP)
0389 04E8 004737 003712        		    jsr PC, @#1994
0389 04EC 062706 000004        		    add #4, SP
0389 04F0 005266 000000        		    inc 0(SP)
0389 04F4 000761               		    br 04D8h
0389 04F6 005266 000002        		    inc 2(SP)
0389 04FA 000750               		    br 04CCh
0389 04FC                      		//363     drawCursor();
0389 04FC 004737 002570        		    jsr PC, @#1400
0389 0500 062706 000004        		    add #4, SP
0389 0504 000207               		    ret
0389 0506                      		leftNumber:
0389 0506 162706 000004        		    sub #4, SP
0389 050A                      		//332     unsigned c=0, b=bombsCnt;
0389 050A 005066 000000        		    clr 0(SP)
0389 050E 013766 004246 000002 		    mov @#2214, 2(SP)
0389 0514                      		//333     do
0389 0514                      		//334     {
0389 0514 012700 004256        		    mov #2222, R0
0389 0518 066600 000000        		    add 0(SP), R0
0389 051C 111000               		    movb (R0), R0
0389 051E 122700 000001        		    cmpb #1, R0
0389 0522 001002               		    bne 0528h
0389 0524                      		//335         if(userMarks[c] == 1) b--;
0389 0524 005366 000002        		    dec 2(SP)
0389 0528                      		//336     } while(b!=0 && ++c);
0389 0528 022766 000000 000002 		    cmp #0, 2(SP)
0389 052E 001407               		    beq 053Eh
0389 0530 012700 000000        		    mov #0, R0
0389 0534 060600               		    add SP, R0
0389 0536 005210               		    inc (R0)
0389 0538 011000               		    mov (R0), R0
0389 053A 005700               		    tst R0
0389 053C 001353               		    bne 0514h
0389 053E                      		//337     drawNumber((void*)040510, b);
0389 053E 012746 040510        		    mov #16712, -(SP)
0389 0542 016646 000004        		    mov 4(SP), -(SP)
0389 0546 004737 004074        		    jsr PC, @#2108
0389 054A 062706 000004        		    add #4, SP
0389 054E 062706 000004        		    add #4, SP
0389 0552 000207               		    ret
0389 0554                      		rightNumber:
0389 0554                      		//342     drawNumber((void*)040573, time);
0389 0554 012746 040573        		    mov #16763, -(SP)
0389 0558 013746 004252        		    mov @#2218, -(SP)
0389 055C 004737 004074        		    jsr PC, @#2108
0389 0560 062706 000004        		    add #4, SP
0389 0564 000207               		    ret
0389 0566                      		hideCursor:
0389 0566                      		//247     redrawCell012(cursorX, cursorY);
0389 0566 013746 004240        		    mov @#2208, -(SP)
0389 056A 013746 004242        		    mov @#2210, -(SP)
0389 056E 004737 003712        		    jsr PC, @#1994
0389 0572 062706 000004        		    add #4, SP
0389 0576 000207               		    ret
0389 0578                      		drawCursor:
0389 0578 000207               		    ret
0389 057A                      		putBombs:
0389 057A 162706 000010        		    sub #8, SP
0389 057E                      		//227     bombsPutted = 1;
0389 057E 012737 000001 004250 		    mov #1, @#2216
0389 0584                      		//228 	unsigned bc = bombsCnt;
0389 0584 013766 004246 000000 		    mov @#2214, 0(SP)
0389 058A                      		//229     do 
0389 058A                      		//230     {
0389 058A 004737 001014        		    jsr PC, @#524
0389 058E 042700 177400        		    bic #65280, R0
0389 0592 013701 004232        		    mov @#2202, R1
0389 0596 004737 001010        		    jsr PC, @#520
0389 059A 010066 000002        		    mov R0, 2(SP)
0389 059E                      		//232         unsigned y = rand() % gameHeight;
0389 059E 004737 001014        		    jsr PC, @#524
0389 05A2 042700 177400        		    bic #65280, R0
0389 05A6 013701 004234        		    mov @#2204, R1
0389 05AA 004737 001010        		    jsr PC, @#520
0389 05AE 010066 000004        		    mov R0, 4(SP)
0389 05B2                      		//233         if(cursorX==x && cursorY==y) continue; // Бомба не должна быть под крсором
0389 05B2 026637 000002 004240 		    cmp 2(SP), @#2208
0389 05B8 001005               		    bne 05C4h
0389 05BA 026637 000004 004242 		    cmp 4(SP), @#2210
0389 05C0 001001               		    bne 05C4h
0389 05C2                      		//233         if(cursorX==x && cursorY==y) continue; // Бомба не должна быть под крсором
0389 05C2 000743               		    br 058Ah
0389 05C4                      		//234         unsigned a = x+y*16;
0389 05C4 016600 000002        		    mov 2(SP), R0
0389 05C8 010046               		    mov R0, -(SP)
0389 05CA 016600 000006        		    mov 6(SP), R0
0389 05CE 012701 000020        		    mov #16, R1
0389 05D2 004737 001010        		    jsr PC, @#520
0389 05D6 010001               		    mov R0, R1
0389 05D8 012600               		    mov (SP)+, R0
0389 05DA 060100               		    add R1, R0
0389 05DC 010066 000006        		    mov R0, 6(SP)
0389 05E0                      		//235         if(playfield[a] == 255) continue; // Бомба в этой клетке уже есть
0389 05E0 012700 004256        		    mov #2222, R0
0389 05E4 066600 000006        		    add 6(SP), R0
0389 05E8 111000               		    movb (R0), R0
0389 05EA 122700 004256        		    cmpb #2222, R0
0389 05EE 001001               		    bne 05F2h
0389 05F0                      		//235         if(playfield[a] == 255) continue; // Бомба в этой клетке уже есть
0389 05F0 000714               		    br 058Ah
0389 05F2                      		//236         playfield[a] = 255;
0389 05F2 012700 004256        		    mov #2222, R0
0389 05F6 066600 000006        		    add 6(SP), R0
0389 05FA 112710 000377        		    movb #255, (R0)
0389 05FE                      		//237     } while(--bc);
0389 05FE 012700 000000        		    mov #0, R0
0389 0602 060600               		    add SP, R0
0389 0604 004256               		    jsr R2, @-(SP)
0389 0606 011000               		    mov (R0), R0
0389 0608 005700               		    tst R0
0389 060A 001277               		    bne 058Ah
0389 060C 062706 000010        		    add #8, SP
0389 0610 000207               		    ret
0389 0612                      		open:
0389 0612 162706 000002        		    sub #2, SP
0389 0616                      		//262     if(x >= gameWidth || y >= gameHeight) return;
0389 0616 023766 004232 000004 		    cmp @#2202, 4(SP)
0389 061C 101404               		    blos 0626h
0389 061E 023766 004234 000006 		    cmp @#2204, 6(SP)
0389 0624 101003               		    bhi 062Ch
0389 0626                      		//262     if(x >= gameWidth || y >= gameHeight) return;
0389 0626 062706 000002        		    add #2, SP
0389 062A 000207               		    ret
0389 062C                      		//263     uint8_t a = playfield[x + y*16];
0389 062C 012700 004256        		    mov #2222, R0
0389 0630 010046               		    mov R0, -(SP)
0389 0632 016600 000006        		    mov 6(SP), R0
0389 0636 004256               		    jsr R2, @-(SP)
0389 0638 016600 000012        		    mov 10(SP), R0
0389 063C 012701 000020        		    mov #16, R1
0389 0640 004737 001010        		    jsr PC, @#520
0389 0644 010001               		    mov R0, R1
0389 0646 012600               		    mov (SP)+, R0
0389 0648 060100               		    add R1, R0
0389 064A 010001               		    mov R0, R1
0389 064C 012600               		    mov (SP)+, R0
0389 064E 060100               		    add R1, R0
0389 0650 111066 000000        		    movb (R0), 0(SP)
0389 0654                      		//264     switch(a)
0389 0654 116600 000000        		    movb 0(SP), R0
0389 0658 004737 001010        		    jsr PC, @#520
0389 065C 003172               		    bgt 0752h
0389 065E 000376 003150        		    swab @1640(SP)
0389 0662 000377 000000        		    swab (0)
0389 0666 000000               		    halt
0389 0668                      		//266         case 255:
0389 0668                      		//267             drawSmile(bmpBad);
0389 0668 003150               		    bgt 073Ah
0389 066A 011244               		    mov (R2), -(R4)
0389 066C 004737 002256        		    jsr PC, @#1198
0389 0670 062706 000002        		    add #2, SP
0389 0674                      		//268             gameOverFlag = 1;
0389 0674 012737 000001 004236 		    mov #1, @#2206
0389 067A                      		//269             break;
0389 067A                      		//270         case 254:
0389 067A                      		//271             return;
0389 067A 062706 000002        		    add #2, SP
0389 067E 000207               		    ret
0389 0680                      		//273     playfield[x + y*16] = 0;
0389 0680 012700 004256        		    mov #2222, R0
0389 0684 010377 016600        		    mov R3, (7552)
0389 0688 000006               		    rtt
0389 068A 010046               		    mov R0, -(SP)
0389 068C 016600 004256        		    mov 2222(SP), R0
0389 0690 012701 000020        		    mov #16, R1
0389 0694 004737 001010        		    jsr PC, @#520
0389 0698 010001               		    mov R0, R1
0389 069A 012600               		    mov (SP)+, R0
0389 069C 060100               		    add R1, R0
0389 069E 010001               		    mov R0, R1
0389 06A0 012600               		    mov (SP)+, R0
0389 06A2 060100               		    add R1, R0
0389 06A4 105010               		    clrb (R0)
0389 06A6 062706 000002        		    add #2, SP
0389 06AA 000207               		    ret
0389 06AC                      		checkWin:
0389 06AC 162706 000004        		    sub #4, SP
0389 06B0                      		//303     unsigned y = 0;
0389 06B0 005066 000000        		    clr 0(SP)
0389 06B4                      		//304     do
0389 06B4                      		//305     {
0389 06B4 005066 000002        		    clr 2(SP)
0389 06B8                      		//307         do
0389 06B8                      		//308         {
0389 06B8 012700 004256        		    mov #2222, R0
0389 06BC 010046               		    mov R0, -(SP)
0389 06BE 016600 000004        		    mov 4(SP), R0
0389 06C2 010046               		    mov R0, -(SP)
0389 06C4 016600 000004        		    mov 4(SP), R0
0389 06C8 012701 000020        		    mov #16, R1
0389 06CC 004737 001010        		    jsr PC, @#520
0389 06D0 010001               		    mov R0, R1
0389 06D2 012600               		    mov (SP)+, R0
0389 06D4 060100               		    add R1, R0
0389 06D6 010001               		    mov R0, R1
0389 06D8 012600               		    mov (SP)+, R0
0389 06DA 060100               		    add R1, R0
0389 06DC 111000               		    movb (R0), R0
0389 06DE 122700 000376        		    cmpb #254, R0
0389 06E2 001003               		    bne 06EAh
0389 06E4                      		//309             if(playfield[x+y*16] == 254) return;
0389 06E4 062706 000004        		    add #4, SP
0389 06E8 000207               		    ret
0389 06EA                      		//310         } while(++x < gameWidth)
0389 06EA 012700 000002        		    mov #2, R0
0389 06EE 060600               		    add SP, R0
0389 06F0 005210               		    inc (R0)
0389 06F2 023710 004232        		    cmp @#2202, (R0)
0389 06F6 101340               		    bhi 06B8h
0389 06F8                      		//311     } while(++y < gameHeight);    
0389 06F8 012700 000000        		    mov #0, R0
0389 06FC 060600               		    add SP, R0
0389 06FE 005210               		    inc (R0)
0389 0700 023710 004234        		    cmp @#2204, (R0)
0389 0704 101327               		    bhi 06B4h
0389 0706                      		//313     drawSmile(bmpWin);
0389 0706 012746 011464        		    mov #4916, -(SP)
0389 070A 004737 002256        		    jsr PC, @#1198
0389 070E 062706 000002        		    add #2, SP
0389 0712                      		//315     gameOverFlag = 1;
0389 0712 012737 000001 004236 		    mov #1, @#2206
0389 0718                      		//316     drawPlayField();
0389 0718 004737 002304        		    jsr PC, @#1220
0389 071C 062706 000004        		    add #4, SP
0389 0720 000207               		    ret
0389 0722                      		main:
0389 0722 162706 000002        		    sub #2, SP
0389 0726                      		//93     putc(0233); // Включение режима 256x256
0389 0726 012700 000233        		    mov #155, R0
0389 072A 004737 001010        		    jsr PC, @#520
0389 072E                      		//94     putc(0232); // Отключение курсора
0389 072E 012700 000232        		    mov #154, R0
0389 0732 004737 001010        		    jsr PC, @#520
0389 0736                      		//95     *(uint16_t*)0177706 = 731; // Запуск таймера
0389 0736 012737 001333 177706 		    mov #731, @#65478
0389 073C                      		//96     *(uint16_t*)0177712 = 0160; // Запуск таймера
0389 073C 012737 000160 177712 		    mov #112, @#65482
0389 0742                      		//97     *(uint16_t*)0177660 = 64; // Выключаем прерывание клавиатуры
0389 0742 012737 000100 177660 		    mov #64, @#65456
0389 0748                      		//99     for(;;)
0389 0748                      		//100     {
0389 0748 004737 002072        		    jsr PC, @#1082
0389 074C                      		//102         draw((void*)045020, bmpLogo, 16, 32);
0389 074C 012703 045020        		    mov #18960, R3
0389 0750 012702 004663        		    mov #2483, R2
0389 0754 012700 000020        		    mov #16, R0
0389 0758 012701 000040        		    mov #32, R1
0389 075C 004737 004643        		    jsr PC, @#2467
0389 0760                      		//103         print(txtMenu);
0389 0760 013746 004256        		    mov @#2222, -(SP)
0389 0764 004737 002120        		    jsr PC, @#1104
0389 0768 062706 000002        		    add #2, SP
0389 076C                      		//106         do
0389 076C                      		//107         {
0389 076C 004737 001014        		    jsr PC, @#524
0389 0770                      		//109 	    	key = *(uint16_t*)0177662 - '0';
0389 0770 013700 177662        		    mov @#65458, R0
0389 0774 162700 000060        		    sub #48, R0
0389 0778 110066 000000        		    movb R0, 0(SP)
0389 077C                      		//110         } while(key >= 4);
0389 077C 116600 000000        		    movb 0(SP), R0
0389 0780 122700 000004        		    cmpb #4, R0
0389 0784 003763               		    ble 076Ch
0389 0786 000740               		    br 0748h
0389 0788 062706 000002        		    add #2, SP
0389 078C 000207               		    ret
0389 078E                      		getBitmap:
0389 078E                      		//283     n += 2;
0389 078E 105266 000002        		    incb 2(SP)
0389 0792 105266 000002        		    incb 2(SP)
0389 0796                      		//284     if(!gameOverFlag && n==1) n=0;
0389 0796 013700 004236        		    mov @#2206, R0
0389 079A 005700               		    tst R0
0389 079C 001007               		    bne 07ACh
0389 079E 116600 000002        		    movb 2(SP), R0
0389 07A2 122700 000001        		    cmpb #1, R0
0389 07A6 001002               		    bne 07ACh
0389 07A8                      		//284     if(!gameOverFlag && n==1) n=0;
0389 07A8 105066 000002        		    clrb 2(SP)
0389 07AC                      		//285     return bmpUn + n*64;
0389 07AC 012700 007524        		    mov #3924, R0
0389 07B0 010046               		    mov R0, -(SP)
0389 07B2 116600 000004        		    movb 4(SP), R0
0389 07B6 007524               		    
0389 07B8 177400               		    
0389 07BA 012701 000100        		    mov #64, R1
0389 07BE 004737 001010        		    jsr PC, @#520
0389 07C2 010001               		    mov R0, R1
0389 07C4 012600               		    mov (SP)+, R0
0389 07C6 060100               		    add R1, R0
0389 07C8 000207               		    ret
0389 07CA                      		redrawCell012:
0389 07CA                      		//290     draw(calcCell2(x,y), getBitmap(playfield[x+y*16]), 4, 16);
0389 07CA 016646 000002        		    mov 2(SP), -(SP)
0389 07CE 016646 000006        		    mov 6(SP), -(SP)
0389 07D2 004737 004032        		    jsr PC, @#2074
0389 07D6 062706 000004        		    add #4, SP
0389 07DA 010003               		    mov R0, R3
0389 07DC 012700 004256        		    mov #2222, R0
0389 07E0 010046               		    mov R0, -(SP)
0389 07E2 016600 000004        		    mov 4(SP), R0
0389 07E6 010046               		    mov R0, -(SP)
0389 07E8 016600 000010        		    mov 8(SP), R0
0389 07EC 012701 000020        		    mov #16, R1
0389 07F0 004737 001010        		    jsr PC, @#520
0389 07F4 010001               		    mov R0, R1
0389 07F6 012600               		    mov (SP)+, R0
0389 07F8 060100               		    add R1, R0
0389 07FA 010001               		    mov R0, R1
0389 07FC 012600               		    mov (SP)+, R0
0389 07FE 060100               		    add R1, R0
0389 0800 011046               		    mov (R0), -(SP)
0389 0802 004737 003616        		    jsr PC, @#1934
0389 0806 062706 000002        		    add #2, SP
0389 080A 010002               		    mov R0, R2
0389 080C 012700 000004        		    mov #4, R0
0389 0810 012701 000020        		    mov #16, R1
0389 0814 004737 004643        		    jsr PC, @#2467
0389 0818 000207               		    ret
0389 081A                      		calcCell2:
0389 081A                      		//257     return y*1024 + x*4;
0389 081A 016600 000004        		    mov 4(SP), R0
0389 081E 012701 002000        		    mov #1024, R1
0389 0822 004737 001010        		    jsr PC, @#520
0389 0826 010046               		    mov R0, -(SP)
0389 0828 016600 000004        		    mov 4(SP), R0
0389 082C 012701 000004        		    mov #4, R1
0389 0830 004737 001010        		    jsr PC, @#520
0389 0834 010001               		    mov R0, R1
0389 0836 012600               		    mov (SP)+, R0
0389 0838 060100               		    add R1, R0
0389 083A 000207               		    ret
0389 083C                      		drawNumber:
0389 083C 162706 000002        		    sub #2, SP
0389 0840                      		//321     uint8_t c=3;
0389 0840 112766 000003 000000 		    movb #3, 0(SP)
0389 0846                      		//322     do
0389 0846                      		//323     {
0389 0846 016600 000006        		    mov 6(SP), R0
0389 084A 012701 000012        		    mov #10, R1
0389 084E 004737 001010        		    jsr PC, @#520
0389 0852 010066 000006        		    mov R0, 6(SP)
0389 0856                      		//325         draw(d, bmpN0 + mod_div*64, 3, 21);
0389 0856 016603 000004        		    mov 4(SP), R3
0389 085A 012700 011704        		    mov #5060, R0
0389 085E 010046               		    mov R0, -(SP)
0389 0860 013700 004232        		    mov @#2202, R0
0389 0864 012701 000100        		    mov #64, R1
0389 0868 004737 001010        		    jsr PC, @#520
0389 086C 010001               		    mov R0, R1
0389 086E 012600               		    mov (SP)+, R0
0389 0870 060100               		    add R1, R0
0389 0872 010002               		    mov R0, R2
0389 0874 012700 000003        		    mov #3, R0
0389 0878 012701 000025        		    mov #21, R1
0389 087C 004737 004643        		    jsr PC, @#2467
0389 0880                      		//326         d += 3;
0389 0880 062766 000003 000004 		    add #3, 4(SP)
0389 0886                      		//327     } while(--c);
0389 0886 012700 000000        		    mov #0, R0
0389 088A 060600               		    add SP, R0
0389 088C 105310               		    decb (R0)
0389 088E 111000               		    movb (R0), R0
0389 0890 005700               		    tst R0
0389 0892 001331               		    bne 0846h
0389 0894 062706 000002        		    add #2, SP
0389 0898 000207               		    ret
0390 0955                      		FILLBLOCKS:
0391 0955 012700 044000        		        MOV #044000, R0
0392 0959 012704 000016        		                MOV #14, R4
0393 095D 012701 013104        		fillBlocks3:	MOV #bmpBlock, R1
0394 0961 012703 000020        		                MOV #16, R3
0395 0965 012702 000020        		fillBlocks2:	MOV #16, R2
0396 0969 012120               		fillBlocks1:	MOV (R1)+, (R0)+
0397 096B 012120               		                MOV (R1)+, (R0)+
0398 096D 162701 000004        		                SUB #4, R1
0399 0971 077205               		                SOB R2, fillBlocks1
0400 0973 062701 000004        		                ADD #4, R1
0401 0977 077312               		                SOB R3, fillBlocks2
0402 0979 077417               		                SOB R4, fillBlocks3
0403 097B 000207               		                RTS PC
0406 097D                      		drawTransImage:
0407 097D 012702 000020        		    MOV     #16, R2
0408 0981 042011               		drawTransImag1:	BIC     (R0)+, (R1)
0409 0983 052021               		    BIS     (R0)+, (R1)+
0410 0985 042011               		    BIC     (R0)+, (R1)
0411 0987 052021               		    BIS     (R0)+, (R1)+
0412 0989 062701 000074        		    ADD     #60, R1                        
0413 098D 077207               		    SOB	    R2, drawTransImag1
0414 098F 000207               		    RTS     PC
0416 0991                      		drawImage:
0417 0991 012702 000020        		    MOV     #16, R2
0418 0995                      		drawImage1:
0419 0995 012021               		    MOV     (R0)+, (R1)+
0420 0997 012021               		    MOV     (R0)+, (R1)+
0421 0999 062701 000074        		    ADD     #60, R1
0422 099D 077205               		    SOB	R2, drawImage1
0423 099F 000207               		    RTS	PC
0427 09A1                      		SHLW:
0428 09A1 000207               		    RTS PC
0432 09A3                      		draw:
0433 09A3 010401               		    MOV R4, R1
0434 09A5 010502               		    MOV R5, R2
0435 09A7                      		draw1:
0436 09A7 012024               		    MOV (R0)+,(R4)+
0437 09A9 077502               		    SOB R5, draw1
0438 09AB 062701 000100        		    ADD #64, R1
0439 09AF 077307               		    SOB R3, draw
0440 09B1 000207               		    RTS PC
0443 09B3                      		.include "resources.inc"
0001 09B3 000000 012000 000000 		bmpLogo:   	insert_bitmap2 "resources/logo.bmp",  128, 37
0003 0E54 000000 000000 000000 		bmpCursor:  	insert_bitmap2t "resources/cursor.bmp",  16, 16
0005 0ED4 177777 037777 177777 		bmpF:    	insert_bitmap2 "resources/f.bmp", 16, 16
0006 0F14 177777 037777 177777 		bmpQ:    	insert_bitmap2 "resources/q.bmp", 16, 16
0008 0F54 177777 037777 177777 		bmpUn:   	insert_bitmap2 "resources/un.bmp", 16, 16
0009 0F94 052525 052525 000001 		bmpB:    	insert_bitmap2 "resources/b.bmp",  16, 16
0010 0FD4 052525 052525 000001 		bmp0:    	insert_bitmap2 "resources/0.bmp",  16, 16
0011 1014 052525 052525 000001 		bmp1:    	insert_bitmap2 "resources/1.bmp",  16, 16
0012 1054 052525 052525 000001 		bmp2:    	insert_bitmap2 "resources/2.bmp",  16, 16
0013 1094 052525 052525 000001 		bmp3:    	insert_bitmap2 "resources/3.bmp",  16, 16
0014 10D4 052525 052525 000001 		bmp4:    	insert_bitmap2 "resources/4.bmp",  16, 16
0015 1114 052525 052525 000001 		bmp5:    	insert_bitmap2 "resources/5.bmp",  16, 16
0016 1154 052525 052525 000001 		bmp6:    	insert_bitmap2 "resources/6.bmp",  16, 16
0017 1194 052525 052525 000001 		bmp7:    	insert_bitmap2 "resources/7.bmp",  16, 16
0018 11D4 052525 052525 000001 		bmp8:    	insert_bitmap2 "resources/8.bmp",  16, 16
0020 1214 177777 177777 037777 		bmpGood: 	insert_bitmap2 "resources/good.bmp", 24, 24
0021 12A4 177777 177777 037777 		bmpBad:  	insert_bitmap2 "resources/bad.bmp", 24, 24
0022 1334 177777 177777 037777 		bmpWin:  	insert_bitmap2 "resources/win.bmp", 24, 24
0024 13C4 177774 171417 031777 		bmpN0:   	insert_bitmap2 "resources/n0.bmp", 12, 21
0025 1404 010420 040401 030104 		bmpN1:   	insert_bitmap2 "resources/n1.bmp", 12, 21
0026 1444 177774 170417 031777 		bmpN2:   	insert_bitmap2 "resources/n2.bmp", 12, 21
0027 1484 177774 170417 031777 		bmpN3:   	insert_bitmap2 "resources/n3.bmp", 12, 21
0028 14C4 010420 041401 030104 		bmpN4:   	insert_bitmap2 "resources/n4.bmp", 12, 21
0029 1504 177774 171417 011777 		bmpN5:   	insert_bitmap2 "resources/n5.bmp", 12, 21
0030 1544 177774 171417 011777 		bmpN6:   	insert_bitmap2 "resources/n6.bmp", 12, 21
0031 1584 177774 170417 031777 		bmpN7:   	insert_bitmap2 "resources/n7.bmp", 12, 21
0032 15C4 177774 171417 031777 		bmpN8:   	insert_bitmap2 "resources/n8.bmp", 12, 21
0033 1604 177774 171417 031777 		bmpN9:   	insert_bitmap2 "resources/n9.bmp", 12, 21                          
0035 1644 042104 042100 010421 		bmpBlock:   	insert_bitmap2 "resources/block.bmp", 16, 16                       
0445 1684                      		endOfROM:              
0449 1684 